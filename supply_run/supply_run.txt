--@name Supply Run
--@author Lil'Tugboat
--@includedir supply_run
--@include https://raw.githubusercontent.com/Jacbo1/Public-Starfall/main/SafeNet/safeNet.lua as SafeNet
--@shared
local net = require("SafeNet")

local Controller = require("supply_run/controller.txt")



if SERVER then
    
    local products = {
        {
            model = "models/props_junk/garbage_newspaper001a.mdl",
            weight = 5,
            name = "Documents",
            color = Color(255, 0,0),
            mat = "models/XQM//Deg360",
            skin = 0,
            routes = {
                {"Spawn Office", "Police Station", 20, 100},

            }
        },
        {
            model = "models/props_vehicles/car002b_physics.mdl",
            weight = 1000,
            name = "Junk Car",
            --mat = "models/XQM//Deg360",
            skin = 0,
            routes = {
                {"Spawn Office", "Junk Shed", 12500, 32500},

            }
        },
        {
            model = "models/props_wasteland/cargo_container01.mdl",
            weight = 2500,
            name = "Shipping Container",
            --mat = "models/XQM//Deg360",
            skin = 0,
            routes = {
                {"Spawn Office", "Junk Shed", 24500, 74500},

            }
        }
    }
    
    
    local settings = {
        DropPlatform = {
            model = "models/sprops/rectangles_superthin/size_6/rect_96x96.mdl",
            mat = "phoenix_storms/stripes",
            color = Color(255, 0, 255),
            skin = 0 ,
            radius = 40,
            solid = false,
        },
        ShopScreen = {
            model = "models/sprops/rectangles_superthin/size_4_5/rect_42x42.mdl",
            mat =   "editor/flat"
        },
        SpawnPlatform = {
            model = "" -- "models/props_junk/wood_pallet001a.mdl",
        },
        Economy = {
            startingCash = 200
        
        }
    }
    
    local placements = {
        map = "gm_blocksand",
        state = {
            {
                type = "SpawnPlatform",
                name = "Spawn Office",
                ang = Angle(),  -- Assuming Angle() initializes to a default angle
                pos = chip():getPos() + Vector(200, 0, 0)
            },
            {
                type = "ShopScreen",
                name = "Spawn Office",
                ang = Angle(0, 0, 90),  -- Adjust angle as needed
                pos = chip():getPos() + Vector(0, 30, 70)
            },
            {
                type = "DropPlatform",
                name = "Junk Shed",
                ang = Angle(),  -- Default angle
                pos = chip():getPos() + Vector(0, -100, 100)
            },
            {
                type = "DropPlatform",
                name = "Police Station",
                ang = Angle(),  -- Default angle
                pos = chip():getPos() + Vector(0, -200, 100)
            }
        }
    }
        
    
    -- buttons/button14.wav -- happy beep 
    -- common/wpn_denyselect.wav -- sad beep
    -- buttons/button18.wav -- sad beep
    -- hitmarkers/mlghit.wav spawn?
    -- hl1/ambience/labdrone2.wav trouble spawning?
    -- NPC_Alyx.Vend_Coin sale?

    local controller = Controller:new(products, settings, placements)


    
else
    local ShopDisplay = require("supply_run/shop_display.txt")
    local shopDisplay = ShopDisplay:new()
    
    hook.add("render", "screenRender", function()
        shopDisplay:updateScreenRender()
    end)
    
    hook.add("starfallUsed", "turnScreenOn", function(activator, used)
        shopDisplay:turnScreenOn(activator, used)
    end)
    
    net.receive("screenInfo", function()
        shopDisplay:handleNetReceive()
    end)
end
