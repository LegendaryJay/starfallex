--@name Supply Run
--@author Lil'Tugboat
--@include https://raw.githubusercontent.com/LegendaryJay/starfallex/main/supply_run/controller.txt as Controller
--@include https://raw.githubusercontent.com/LegendaryJay/starfallex/main/supply_run/shop_display.txt as Display
--@include https://raw.githubusercontent.com/Jacbo1/Public-Starfall/main/SafeNet/safeNet.lua as SafeNet
--@shared
local net = require("SafeNet")

local Controller = require("Controller")


if SERVER then
    
    local products = {
        {
            model = "models/props_junk/garbage_newspaper001a.mdl",
            weight = 5,
            name = "Documents",
            --mat = "models/XQM//Deg360",
            skin = 0,
            routes = {
                {"Spawn Office", "Police Station", 20, 100},

            }
        },
        {
            model = "models/props_vehicles/car002b_physics.mdl",
            weight = 1000,
            name = "Junk Car",
            --mat = "models/XQM//Deg360",
            skin = 0,
            routes = {
                {"Spawn Office", "Junk Shed", 12500, 32500},

            }
        },
        {
            model = "models/props_wasteland/cargo_container01.mdl",
            weight = 2500,
            name = "Shipping Container",
            --mat = "models/XQM//Deg360",
            skin = 0,
            routes = {
                {"Spawn Office", "Junk Shed", 24500, 74500},

            }
        }
    }
    
    
    local settings = {
        DropPlatform = {
            model = "models/sprops/rectangles_superthin/size_6/rect_96x96.mdl",
            mat = "phoenix_storms/stripes",
            color = Color(255, 0, 255),
            skin = 0 ,
            radius = 40,
            solid = false,
        },
        ShopScreen = {
            model = "models/sprops/rectangles_superthin/size_4_5/rect_42x42.mdl",
        },
        SpawnPlatform = {
            model = "" -- "models/props_junk/wood_pallet001a.mdl",
        },
        Economy = {
            startingCash = 200
        
        }
    }    

    local controller = Controller:new(products, settings)

    controller:queueComponent("SpawnPlatform", "Spawn Office", chip():getPos() + Vector(200,0,0), Angle())
    controller:queueComponent("ShopScreen", "Spawn Office", chip():getPos() + Vector(0,30,70), Angle(0,0,90))
    controller:queueComponent("DropPlatform", "Junk Shed", chip():getPos()+ Vector(0,-100,100), Angle())
    controller:queueComponent("DropPlatform", "Police Station", chip():getPos()+ Vector(0,-200,100), Angle())


    
else
    local ShopDisplay = require("Display")
    local shopDisplay = ShopDisplay:new()
    
    hook.add("render", "screenRender", function()
        shopDisplay:updateScreenRender()
    end)
    
    hook.add("starfallUsed", "turnScreenOn", function(activator, used)
        shopDisplay:turnScreenOn(activator, used)
    end)
    
    net.receive("screenInfo", function()
        shopDisplay:handleNetReceive()
    end)
end
