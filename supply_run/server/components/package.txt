--@name Package Class
--@author Lil'Tugboat
--@server

local Package = class("Package")

function Package:initialize(entity, ownerId, product, controller)
    self.type = "Package"
    self.ownerId = ownerId
    self.id = entity:entIndex()
    self.product = product
    self.entity = entity
    self.controller = controller
    self.halfSize = self.entity:obbSize() * 0.5
    self.nextUpdate =timer.curtime()
    self.destinationObject = self.controller:getRecordByFunction("DropPlatform", function(key, item)
        return item.name == self.product.destination
    end)
    
    self:initializeUpdateHook()
    
    controller:addEntityInfo(self)
    return self
end

function Package.create(ownerId, pos, ang, model, controller, product)
    local item = prop.create(pos, ang, model, true)
    return Package:new(item, ownerId, product, controller)
end

function Package:initializeUpdateHook()
    hook.add("think", "update_package_" .. self.id, function()
        self:updateDistance()
    end)
end

function Package:updateDistance()
    if not self.entity or not self.entity:isValid() then
        self:remove()
        return
    end
    
    if self.entity:isPlayerHolding() or timer.curtime() >= self.nextUpdate then
        local distance = self:getDistToDest()
        if distance <= 0 then
            self:sell()
            return
        end 
        local interval = math.max(0.1, math.log(distance + 1) * 0.5)  -- Calculate delay based on distance
        self.nextUpdate = timer.curtime() + interval
    end
end

function Package:getDistToDest()
    local closestPoint = self:closestPointToDest()
    return (closestPoint - self.destinationObject.zoneCenter):getLength() - self.destinationObject.zoneRadius
end

function Package:closestPointToDest()
    local localVector = worldToLocal(self.destinationObject.zoneCenter, Angle(), self.entity:obbCenterW(), self.entity:getAngles())
    for i = 1, 3 do
        localVector[i] = math.clamp(localVector[i], -self.halfSize[i], self.halfSize[i])
    end
    return localToWorld(localVector, Angle(), self.entity:obbCenterW(), self.entity:getAngles())
end

function Package:sell()
    if self.entity and self.entity:isValid() then
        self.controller:sell(self.ownerId, self.product.pay)
    end
    self:remove()
end

function Package:remove()
    if self.entity and self.entity:isValid() then 
        self.entity:remove()
    end
    self.controller:removeRecord("Package", nil, self)
    hook.remove("think", "update_package_" .. self.id)
end

return Package