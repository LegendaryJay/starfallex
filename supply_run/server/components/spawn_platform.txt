--@name Spawn Platform Class
--@author Lil'Tugboat
--@include https://raw.githubusercontent.com/Jacbo1/Public-Starfall/main/SafeNet/safeNet.lua as SafeNet
--@include supply_run/server/queue_manager.txt
--@server

local net = require("SafeNet")
local QueueManager = require("supply_run/server/queue_manager.txt")
local SpawnPlatform = class("SpawnPlatform")

function SpawnPlatform:initialize(name, pos, ang, entity, controller, settings)
    self.type = "SpawnPlatform"
    self.name = name
    self.pos = pos
    self.ang = ang
    self.entity = (entity and entity:isValid()) and entity or nil
    
    self.queue = QueueManager:new(name, function(item) return self.controller:spawnNext(item) end, function(product) return self:spawnCondition(product)end)
    
    if entity and entity:isValid() then
        self.halfSize = entity:obbSize() * 0.5
    else 
        self.halfSize = Vector()
    end
    self:updatePos()
    self.controller = controller
    net.receive(name, function(_, ply)
        index = net.readFloat()
        local product = self.controller:getShopProduct(self.name, index)
        local cost = product.cost
        if controller:removeMoneyFromUser(ply:getSteamID(), cost) then
            self:queueSpawn(ply:getSteamID(), product)
        end
    end)
    controller:addEntityInfo(self)
    return self
end

function SpawnPlatform:updatePos()
    if self.entity and self.entity:isValid() then
        self.center = self.entity:obbCenterW()
        self.pos = self.entity:getPos()
        self.ang = self.entity:getAngles()
    else
        self.center = self.pos
    end  
    self.top = self.center + self.ang:getUp() * self.halfSize[3]
end

function SpawnPlatform.create(name, pos, ang, mdl, controller, settings)
    local entity = nil
    if mdl != "" and mdl != nil then
        entity = prop.create(pos, ang, mdl, true)
        entity:setUnbreakable(true)
    end
    return SpawnPlatform:new(name, pos, ang, entity, controller, settings)
    
end

function SpawnPlatform:queueSpawn(playerId, product)
    pos, ang = self:getSpawnPos(product)
    data = table.copy(product)
    data.pos = pos
    data.ang = ang
    data.type = "Package"
    data.name = playerId
    self.queue:queueComponent(data, function(product) return self:spawnCondition(product) end)
end


function SpawnPlatform:getSpawnPos(product)
    itemOffset = product.spawnInfo.spawnPos or Vector()
    return localToWorld(itemOffset, Angle(), self.top, self.ang )
end

function SpawnPlatform:spawnCondition(product)
    local flatHalfSize =  Vector(product.spawnInfo.size[1], product.spawnInfo.size[2], 0) * 0.5
    local t = trace.hull(
        product.pos - Vector(0,0, product.spawnInfo.size[3] * 0.5), 
        product.pos  + Vector(0,0, product.spawnInfo.size[3] * 0.5) , 
        -flatHalfSize,
        flatHalfSize,
        self.entity,
         nil,
         nil, 
        true
    )
    if not t.Hit then
        
        if self.problemHolo and self.problemHolo:isValid() and #self.queue.queue < 2 then 
            self.packageHolo:remove()
            self.problemHolo:remove()
        end
        return true

    else
        if not self.problemHolo or not self.problemHolo:isValid() then
        
            posOffset = product.spawnInfo.center
            posOffset = posOffset:setZ(0)
            self.problemHolo = hologram.create(pos - posOffset,ang, "models/sprops/cuboids/height48/size_0/cube_42x42x48.mdl")
            local size = Vector(product.spawnInfo.size[1], product.spawnInfo.size[2], 0)
            self.problemHolo:setSize(size)
            self.problemHolo:setMaterial("phoenix_storms/fender_white")
            self.problemHolo:setColor(Color(255, 0, 0, 255))
        
            self.packageHolo = hologram.create(pos,ang, product.model, Vector())
            self.controller:modifyEntity(self.holoEntity, product)
        end
        
        self.problemHolo:setPos(t.HitPos + Vector(math.random(),math.random(),math.random()))
        self.packageHolo:setClip(1, true, t.HitPos, -self.ang:getUp())
        self.packageHolo:setScale(Vector(1,1,1))
        
    end
    return false
end

return SpawnPlatform