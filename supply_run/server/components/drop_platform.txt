--@name Drop Platform
--@author Lil'Tugboat
--@server

local DropPlatform = class("DropPlatform")
function DropPlatform:initialize(name, pos, ang, entity, controller, settings)
    self.type = "DropPlatform"
    self.edit = false
    
    if entity and entity:isValid() then
        self.entity = entity
        self.noEntity = false
    else
        self.entity = nil
        self.noEntity = true
    end
    
    self.name = name
    self.entity = entity
    self.pos = pos
    self.ang = ang
    self.controller = controller

    self.holo = hologram.create(Vector(), Angle(), "models/hunter/blocks/cube8x8x8.mdl", Vector())
    self.zoneRadius = (settings and settings.radius) and settings.radius or 20
    self.zoneSize = Vector(1, 1, 1) * self.zoneRadius * 2
    self.holoScale = self.zoneSize / self.holo:obbSize()

    self.holo:setScale(self.holoScale:setX(-self.holoScale[1]))
    self.holo:setMaterial("phoenix_storms/fender_white")
    self.holo:setColor(Color(255, 0, 0, 50))

    self:updatePos()
    --self:setEdit(true)    
    --controller:addEntityInfo(self)
    return self
end

function DropPlatform:updatePos()
    local center = self.pos
    if isValid(self.entity) then 
        self.pos = self.entity:getPos()
        self.ang = self.entity:getAngles()
        center = self.entity:obbCenterW() + self.ang:getUp() * self.entity:obbSize()[3] * 0.5
    end
    
    self.zoneCenter = center + self.ang:getUp() * self.zoneRadius
    
    pos, ang = localToWorld(-self.holo:obbCenter() * self.holoScale, Angle(), self.zoneCenter, self.ang)
    self.holo:setAngles(self.ang)
    self.holo:setPos(pos)
end

function DropPlatform.create(name, pos, ang, mdl, controller, settings)
    local entity = nil
    if mdl != "" and mdl != nil then
        entity = prop.create(pos, ang, mdl, true)
        entity:setUnbreakable(true)
    end
    return DropPlatform:new(name, pos, ang, entity, controller, settings)
end

function DropPlatform:setEdit(editMode)
    if editMode == nil then
        self.edit = not self.edit
    else
        self.edit = editMode
    end
    
    if self.edit then
        hook.add("think", "drop editMode " .. self.name, function() 
            self:editRun()
        end)
    else
        hook.remove("think", "drop editMode ")
        if self.entity and self.noEntity then
            self.entity:remove()
        end
    end
end
    
function DropPlatform:editRun()
    if not self.entity and prop.canSpawn() then
        self.entity = prop.create(self.pos, self.ang, "models/sprops/misc/axis_plane.mdl", true)
    end        
    self:updatePos()
end
     


return DropPlatform