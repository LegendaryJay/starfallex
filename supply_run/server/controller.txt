--@name Controller Class
--@author Lil'Tugboat
--@includedir supply_run
--@includedir supply_run/server
--@includedir supply_run/server/components/

--@server

-- components
local Package = require("supply_run/server/components/package.txt")
local SpawnPlatform = require("supply_run/server/components/spawn_platform.txt")
local ShopScreen = require("supply_run/server/components/shop_screen.txt")
local DropPlatform = require("supply_run/server/components/drop_platform.txt")

//managers
local StateRecorder = require("supply_run/server/state_recorder.txt")
local EntityManager = require("supply_run/server/entity_manager.txt")
local ProductManager = require("supply_run/server/product_manager.txt")
local QueueManager = require("supply_run/server/queue_manager.txt")

// shared
local Economy = require("supply_run/economy.txt")

local Controller = class("Controller")
function Controller:initialize(configs)
    self.productManager = ProductManager:new(configs.products)
    self.entityManager = EntityManager:new() 
    self.queueManager = QueueManager:new("controller", function(item) self:spawnNext(item) end)
    self.economy = Economy:new(configs.defaults.Economy.startingCash or 0)
    
    self.stateRecorder = StateRecorder:new()
    
    for key, value in pairs(configs) do
        self:setRecordSet(key, value)
    end
    
    self:loadSnapshot(self.stateRecorder:getRecord("snapshot", "state"))
    return self
end

function Controller:loadSnapshot(state)
    if state then
        for _, data in pairs(state) do
            self:queueComponent(data)
        end
    end
end

-- product stuff
function Controller:addProductInfo(object)
    self.productManager:addProductInfo(object)
end
function Controller:getProductData(startLocation)
    return self.productManager:getProductData(startLocation)
end
function Controller:getShopProduct(shopName, key)
    return self.productManager:getShopProduct(shopName, key)
end

-- entity info
function Controller:addEntityInfo(object)
    self.entityManager:addEntity(object)
end
function Controller:getEntityInfo(entity)
    return self.entityManager:getEntityInfo(entity)
end
function Controller:removeEntityInfo(id)
    self.entityManager:removeEntity(id)
end
function Controller:modifyEntity(entity, settings)
    self.entityManager:modifyEntity(entity, settings)
end

-- Records
function Controller:setRecord(type, index, data)
    self.stateRecorder:setRecord(type, index, data)
end

function Controller:setRecordSet(type, data)
    self.stateRecorder:setRecordSet(type, data)
end

function Controller:getRecord(type, index)
    return self.stateRecorder:getRecord(type, index)
end

function Controller:getRecordByFunction(type, func)
    return self.stateRecorder:getRecordByFunction(type, func)
end

function Controller:getRecordSet(type, func)
    return self.stateRecorder:getRecordSet(type, func)
end
function Controller:removeRecord(type, index, data)
    return self.stateRecorder:removeRecord(type, index, data)
end

function Controller:modifyRecord(type, index, newData)
    local record = self.stateRecorder:getRecord(type, index)
    if record then
        self.stateRecorder:setRecord(type, index, newData)
    else
        error("Record not found")
    end
end


-- Economy
function Controller:createUser(userId)
    self.economy:createUser(userId)
end

function Controller:getUserBalance(userId)
    return self.economy:getBalance(userId)
end

function Controller:addMoneyToUser(userId, amount)
    self.economy:addMoney(userId, amount)
end

function Controller:removeMoneyFromUser(userId, amount)
    return self.economy:removeMoney(userId, amount)
end

function Controller:transferMoneyBetweenUsers(fromUserId, toUserId, amount)
    return self.economy:transferMoney(fromUserId, toUserId, amount)
end

-- Queue stuff
function Controller:queueComponent(data, condition)
    self.queueManager:queueComponent(data, condition)
end
function Controller:spawnNext(nextItem)
    if nextItem then
        local componentCreators = {
            DropPlatform = DropPlatform.create,
            ShopScreen = ShopScreen.create,
            SpawnPlatform = SpawnPlatform.create,
            Package = Package.create
        }
        local creator = componentCreators[nextItem.type]
        if creator then
            local settings = self:getRecord("defaults")
            local mergedSettings = table.inherit(nextItem, settings[nextItem.type] or {})
            local item = creator(nextItem.name, nextItem.pos, nextItem.ang, nextItem.model or "", self, mergedSettings)
            if item and item.entity then
                self:modifyEntity(item.entity, mergedSettings)
            end
            if item then
                self:setRecord(nextItem.type, nil, item)
            end
        else
            print("Error: No creator found for component type", nextItem.type)
        end
    end
end


return Controller