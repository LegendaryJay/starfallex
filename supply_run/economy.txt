--@name Economy
--@author Lil'Tugboat
--@include https://raw.githubusercontent.com/Jacbo1/Public-Starfall/main/SafeNet/safeNet.lua as SafeNet
--@shared
local net = require("SafeNet")

if SERVER then 
    local Economy = class("Economy")

    function Economy:initialize(initialBalance)
        self.initialBalance = initialBalance or 0
        self.balances = {}
        net.receive("updateBalance", function (_, ply)
            local amount = net.readFloat()
            userId = ply:getSteamID()
            self:updateBalance(userId, amount)
        end)
        return self
    end
    function Economy:createUser(userId)
        if not self.balances[userId] then
            print("created ".. userId)
            self.balances[userId] = self.initialBalance
        end
    end
    
    function Economy:getBalance(userId)
        self:createUser(userId)
        return self.balances[userId] or self.initialBalance
    end

    
    function Economy:sell(userId, amount)
        self:updateBalance(userId, amount)
    end
    
    function Economy:buy(userId, amount)
        if self:getBalance(userId) >= amount then
            self:updateBalance(userId, -amount)
            return true
        else
            print("Insufficient funds from " .. userId)
            return false  
        end
    end    
    function Economy:updateBalance(userId, amount)
        self.balances[userId] = self:getBalance(userId) + amount
        if amount > 0 then
            print("Balance changed of " .. amount .. " for " .. userId)
        end
        net.start("balance")
            net.writeFloat(self:getBalance(userId))
        net.send(ply)
    end

    return Economy
end

if CLIENT then
    local Economy = class("Economy")

    function Economy:initialize()
        self.balance = 0 
        
        net.receive("balance", function() 
            self.balance = net.readFloat()
        end)
        
        return self
    end

    function Economy:canBuy(amount)
        return amount < self.balance
    end

    function Economy:buy(amount)
        if self:canBuy(amount) then
            self:updateBalance(-amount)
            return true
        end
        return false
    end
    function Economy:sell(amount)
        self:updateBalance(amount)
        return true

    end    
    
    function Economy:getBalance()
        return self.balance
    end
    
    function Economy:updateBalance(amount)
        amount = amount or 0
        self.balance = self.balance + amount
        net.start("updateBalance")
            net.writeFloat(amount)
        net.send()
    end
    return Economy
end
