--@name Shop Menu
--@author Lil'Tugboat
--@include https://raw.githubusercontent.com/Jacbo1/Public-Starfall/main/SafeNet/safeNet.lua as SafeNet
--@client

local net = require("SafeNet")

local button = class("Button")

function button:initialize(text)
    self.x = 0
    self.y = 0
    self.w = 0
    self.h = 0
    self.cx = 0
    self.cy = 0
    self.text = text or ""
    self.pressed = false
    self.hovered = false
    self.baseColor = Color(0, 60, 60)
    self.hoverColor = Color(0, 120, 120) 
    self.pressColor = Color(0, 180,  180)
    self.buttonShadowColor = Color(0, 40, 40)
    self.textColor = Color(200,250,250)
end

function button:setButton(x, y, w, h, text)
    self.x = x or 0
    self.y = y or 0
    self.w = w or 0
    self.h = h or 0
    self.text = text or self.text or ""
end

function button:isHovered(cx, cy)
    return cx and cx > self.x and cx < self.x + self.w and cy > self.y and cy < self.y + self.h
end

function button:draw()
    local bgColor = self.baseColor
    if self.pressed then
        bgColor = self.pressColor
    elseif self.hovered then
        bgColor = self.hoverColor
    end
    
    pressedOffset = self.pressed and 0 or 1
    
    --draw button  shadow
    render.setColor(self.buttonShadowColor)
    render.drawRect(self.x, self.y, self.w, self.h)
    --draw button
    render.setColor(bgColor)
    render.drawRect(self.x - pressedOffset, self.y - pressedOffset, self.w, self.h)       
    -- Draw Button Lable
    render.setColor(self.textColor)
    render.drawSimpleText(self.x + self.w * 0.5 - pressedOffset, self.y + self.h * 0.5 - pressedOffset, self.text, TEXT_ALIGN.CENTER, TEXT_ALIGN.CENTER)
end

function button:update()
    cx, cy = render.cursorPos()
    self.hovered = self:isHovered(cx, cy)
end

    
    
    
    
local Menu = class("Menu")

function Menu:initialize(products, spawnerName)
    --self.products = products
    self.groupedProducts = {}
    self.lookupProducts = {}
    for index, p in ipairs(products) do
        if not self.groupedProducts[p.destination] then
            self.groupedProducts[p.destination] = {}
        end
        p.index = index
        table.insert(self.groupedProducts[p.destination], p)
    end
    self.spawnerName = spawnerName
    self.pressed = false
    self.buttons = {}
end

function Menu:draw()
    local screenWidth, screenHeight = render.getResolution()
    
    -- Define colors and fonts
    local backgroundColor = Color(170, 220, 220)
    local headerColor = Color(0, 120, 120)
    local textColor = Color(255, 255, 255)
    
    local font = "DermaDefault"

    local margin = 5

    -- Draw Title
    local th = 25
    local titleFont = render.createFont(font, th, nil, true)
    render.setFont(titleFont)
    render.drawSimpleText(screenWidth * 0.5, th, "Police Station Shop", TEXT_ALIGN.CENTER, TEXT_ALIGN.CENTER)
    
    local yVal = th + margin
    
    local index = 1
    for location, products in pairs(self.groupedProducts) do    
        -- Draw Category
        ch = 18
        local catFont = render.createFont(font, ch, nil, true)
        render.setFont(catFont)
        render.setColor(Color())
        render.drawSimpleText(th, margin + yVal, "Hauls to " .. location, TEXT_ALIGN.LEFT)
        yVal = yVal + ch + margin * 2
        
        for key, product in pairs(products) do
            -- info panel
            px = 90
            hh = 18
            py = yVal
            pw = 300
            ph = 16
            -- Draw header
            local headerFont = render.createFont(font, hh, nil, true)
            render.setColor(headerColor)
            render.drawRect(px, py, pw, hh)
            render.setFont(headerFont)
            render.setColor(textColor)
            render.drawSimpleText(margin + px, py, product.name, TEXT_ALIGN.LEFT)
            render.drawSimpleText(pw + px - margin, py, product.weight .. "wt", TEXT_ALIGN.RIGHT)
      
            -- Draw label area
            render.setColor(backgroundColor)
            render.drawRect(px + (pw - margin) * 0.5 + margin, py + hh, (pw - margin) * 0.5, ph)
            render.drawRect(px, py + hh, (pw - margin) * 0.5, ph)
            
            local labelFont = render.createFont(font, ph, nil, true)
            render.setFont(labelFont)
            render.setColor(Color(0,0,0))
            render.drawSimpleText(px + margin, py + hh, "Cost: " .. product.cost, TEXT_ALIGN.LEFT)
            render.drawSimpleText(px + pw * 0.5  + margin * 1.5, py + hh, "Pay: " .. product.pay, TEXT_ALIGN.LEFT)
            
            sizeY = ph + hh
            -- button section
            local by = yVal + margin
            local bh = sizeY - 2 * margin
            local bw = bh + 8
            local bx = px - margin - bw
            
            if not self.buttons[index] then 
                self.lookupProducts[index] = product.index
                self.buttons[index] = button:new("Haul") 
                self.buttons[index]:setButton(bx, by, bw, bh)
            end
            self.buttons[index]:update()
            self.buttons[index]:draw()
            
            yVal = yVal + ph * 2 + margin
            index = index + 1
        end
    end
end

function Menu:handleInput()
    if player():keyDown(IN_KEY.USE) then
        if not self.pressed then
            self.pressed = true
            local cx, cy = render.cursorPos()
            for i, button in ipairs(self.buttons) do
                if button:isHovered(cx, cy) then
                    self:buy(self.lookupProducts[i])
                    button.pressed = true
                    break
                end
            end
        end
    elseif self.pressed then
        self.pressed = false
        for _, button in ipairs(self.buttons) do
            button.pressed = false
        end
    end
end

function Menu:buy(index)
    net.start(self.spawnerName)
    net.writeFloat(index)
    net.send()
end

return Menu