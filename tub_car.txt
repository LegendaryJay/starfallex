--@name Tub car
--@author Lil'Tugboat
--@server


local wheelMass = 500

--[[
prop.setPropClean(false)
constraint.setConstraintClean(false)
prop.setPropUndo(true)
]]

local seat
local wheelFR 
local wheelFL
local wheelBL
local wheelBR
local platform
local steering
local headLightR
local headLightL
local wireLightL
local wireLightR

local holos = {}


chip():setNocollideAll(true)
ropeI = 0

function ittRopeInd()
    ropeI = ropeI + 1
    return ropeI
end

local function spawnProps()
    local center = chip():getPos() + Vector(0,0,60)
    coroutine.yield()

    
    platform = prop.create(center, Angle(0,180,0),"models/props_interiors/BathTub01a.mdl",true)
    platform:setNocollideAll(true)
    platform:setMass(wheelMass * 1.1)
    
    halfSize = platform:obbSize() * 0.5
    right = -platform:getRight() * halfSize[2]
    forward = -platform:getForward() * halfSize[1] *0.65
    up = -platform:getUp() * (halfSize[3])
    upRear = -platform:getUp() * (halfSize[3])
    coroutine.yield()
    
    headlightCenter = platform:obbCenterW() - platform:getForward() * halfSize[1] * 0.85  + up * 0.2
    tailLightCenter = platform:obbCenterW() + platform:getForward() * halfSize[1] * 0.85  + up * 0.2
    
    headLightL = prop.createSent(headlightCenter - right * 0.55, Angle(0,0,0), "gmod_wire_lamp", true, {
        b = 255,
        Brightness = 8,
        Dist = 1024,
        FOV = 90,
        g = 255,
        Model = "models/sprops/trans/lights/light_a2.mdl",
        on = false,
        r = 255,
        Texture = "effects/flashlight001",
    })
    
    constraint.weld(headLightL, platform)
    headLightL:setNocollideAll(true)
    wireLightL = headLightL:getWirelink()
    coroutine.yield()    
    
    headLightR = prop.createSent(headlightCenter + right * 0.55, Angle(0,0,0), "gmod_wire_lamp", true, {
        b = 255,
        Brightness = 8,
        Dist = 1024,
        FOV = 90,
        g = 255,
        Model = "models/sprops/trans/lights/light_a2.mdl",
        on = false,
        r = 255,
        Texture = "effects/flashlight001",
    })
    
    constraint.weld(headLightR, platform)
    headLightR:setNocollideAll(true)
    wireLightR = headLightR:getWirelink()
    coroutine.yield()
    
    
    seat = prop.createSeat(platform:obbCenterW() + Vector(-20,0,-14), Angle(0,-90,35),"models/nova/airboat_seat.mdl",true)
    seat:setColor(Color(0,0,0,0))
    seat:setNocollideAll(true)
    
    constraint.weld(seat, platform)
    coroutine.yield()    
    
    wheelMdl = "models/sprops/trans/miscwheels/thick_moto25.mdl"
    backWheelMdl = wheelMdl
    
    wheelFR = prop.create(platform:obbCenterW() + right + forward + up, Angle(), wheelMdl, true)
    wheelFR:enableSphere(true)
    wheelFR:setBodygroup(1, 2)
    wheelFR:setPhysMaterial("jeeptire")
    wheelFR:setMass(wheelMass)
    
    constraint.rope(ittRopeInd(), wheelFR, platform, nil, nil, Vector(), -right)
    constraint.rope(ittRopeInd(), wheelFR, platform, nil, nil, Vector(), -forward)
    coroutine.yield()   
       
    wheelFL = prop.create(platform:obbCenterW() - right + forward + up, Angle(), wheelMdl, true)
    wheelFL:enableSphere(true)
    wheelFL:setBodygroup(1, 2)
    wheelFL:setPhysMaterial("jeeptire")
    wheelFL:setMass(wheelMass)
    constraint.nocollide(wheelFL, wheelFR)
    
    constraint.rope(ittRopeInd(), wheelFL, platform, nil, nil, Vector(), right)
    constraint.rope(ittRopeInd(), wheelFL, platform, nil, nil, Vector(), -forward)
    coroutine.yield()  
    
    steeringL = prop.create(wheelFL:obbCenterW() + Vector(0,0,100), Angle(0, 0,0),"models/sprops/geometry/sphere_3.mdl",true)
    steeringL:setNocollideAll(true)
    steeringL:setMass(wheelMass * 999)
    coroutine.yield()
    
    steeringR = prop.create(wheelFR:obbCenterW() + Vector(0,0,100), Angle(0, 0,0),"models/sprops/geometry/sphere_3.mdl",true)
    steeringR:setNocollideAll(true)
    steeringR:setMass(wheelMass * 999)
    --constraint.axis(steeringR, platform, 0, 0, Vector(),  Vector(), nil,nil, nil, true, Vector(0,0,1) )
    coroutine.yield()
        
    wheelBL = prop.create(platform:obbCenterW() - right * 1.1 - forward * 0.5  + upRear, Angle(), backWheelMdl, true)
    wheelBL:enableSphere(true)
    wheelBL:setBodygroup(1, 2)
    wheelBL:setPhysMaterial("jeeptire")
    wheelBL:setMass(wheelMass)
    constraint.nocollide(wheelBL, wheelFR)
    constraint.nocollide(wheelBL, wheelFL)
    
    constraint.rope(ittRopeInd(), wheelBL, platform, nil, nil, Vector(), right)
    constraint.rope(ittRopeInd(), wheelBL, platform, nil, nil, Vector(), -forward)
    coroutine.yield()   
       
    wheelBR = prop.create(platform:obbCenterW() + right * 1.1 - forward * 0.5  + upRear, Angle(), backWheelMdl, true)
    wheelBR:enableSphere(true)
    wheelBR:setBodygroup(1, 2)
    wheelBR:setPhysMaterial("jeeptire")
    wheelBR:setMass(wheelMass)
    constraint.nocollide(wheelBR, wheelFR)
    constraint.nocollide(wheelBR, wheelFL)    
    constraint.nocollide(wheelBR, wheelBL)
    
    constraint.rope(ittRopeInd(), wheelBR, platform, nil, nil, Vector(), -right)
    constraint.rope(ittRopeInd(), wheelBR, platform, nil, nil, Vector(), -forward)
    coroutine.yield()     
         
    steeringWheel = prop.create(platform:obbCenterW() + Vector(-14,0,18) , Angle(20,180,0), "models/sprops/trans/stwheels/stwheel_2.mdl", true)
    constraint.weld(steeringWheel, seat)      
      
          
    tailLightL = prop.createSent(tailLightCenter, Angle(0,180,0), "gmod_wire_light", true, {
         B = 255,
         brightness = 2,
         directional = false,
         G = 255,
         glow = false,
         Model = "models/sprops/trans/lights/light_b1.mdl",
         R = 255,
         radiant = false,
         size = 256,
    })
    constraint.weld(tailLightL, platform)


    local vecA = Vector(0,0,0)
    local vecB =  Vector(0, 0, 0)

    
    constraint.ballsocketadv( wheelFL, steeringL, nil, nil, Vector(), Vector(), nil, nil, Vector(-0.1,-180,-0.1), Vector(0.1,180,0.1), Vector(), true, nil)
    constraint.ballsocketadv( wheelFR, steeringR, nil, nil, Vector(), Vector(), nil, nil, Vector(-0.1,-180,-0.1), Vector(0.1,180,0.1), Vector(), true, nil)

    constraint.ballsocket(platform, wheelFL, 0, 0, Vector(), 0, 0, true)
    constraint.ballsocket(platform, wheelFR, 0, 0, Vector(), 0, 0, true)

    constraint.axis(wheelBL, platform, 0, 0, Vector(),  Vector(), nil,nil, nil, true, Vector(0,1,0) )
    constraint.axis(wheelBR, platform, 0, 0, Vector(),  Vector(), nil,nil, nil, true, Vector(0,1,0) )    

    local structure = platform:getAllConstrained()
    for key, ent in pairs(structure) do
        ent:setFrozen(false) 
    end
    
end

local co = coroutine.create(spawnProps)

hook.add("think", "holoSpawner", function()
    if coroutine.status(co) ~= "dead" then
        while prop.canSpawn() and coroutine.status(co) ~= "dead"  do
            coroutine.resume(co)
        end
    else
        hook.remove("think", "holoSpawner")
        hook.add("think", "keepSeatUpright", run)
    end

end)


-- Define variables
local steer = 0
local angle = 0
local lastTime = timer.curtime()
local localPos = Vector(-52.403, -35.634, 0)
local lastPos = Vector()



function move(yaw, speed)
    local targetAng = platform:getAngles() + Angle(0,yaw,0)
    steeringL:setAngles(targetAng)
    steeringR:setAngles(targetAng)

    wheelBL:applyTorque(-wheelBL:getRight() * speed * wheelMass)
    wheelBR:applyTorque(-wheelBR:getRight() * speed * wheelMass)
    
    wheelFL:applyTorque(-wheelBL:getRight() * speed * wheelMass)
    wheelFR:applyTorque(-wheelBR:getRight() * speed * wheelMass)

end


local watchInKey = {
    [IN_KEY.FORWARD] = true,
    [IN_KEY.BACK] = true,
    [IN_KEY.MOVERIGHT] = true,
    [IN_KEY.MOVELEFT] = true,
    [IN_KEY.JUMP] = true,
    [IN_KEY.SPEED] = true,
}

lightOn = false

activeInputs = {}
local driver = nil

speedStep = 1.5
rollStep = 20
speed = 0

function run()
    if not steeringL:isFrozen() then
        steeringL:setFrozen(not steeringL:isPlayerHolding())
    end
    if not steeringR:isFrozen() then
        steeringR:setFrozen(not steeringR:isPlayerHolding())
    end


    if seat:getDriver() and seat:getDriver():isValid() then
        driver = seat:getDriver()
        local roll = 0
        local boost = 1
        local speed = 0
        
        if activeInputs[IN_KEY.JUMP] and activeInputs[IN_KEY.JUMP] == 1 then
            lightOn = not lightOn
            wireLightL.On = lightOn and 1 or 0
            wireLightR.On = lightOn and 1 or 0
        end
        
        if activeInputs[IN_KEY.SPEED] and activeInputs[IN_KEY.SPEED] > 0 then
            boost = 1.5        
        end
        
        if activeInputs[IN_KEY.FORWARD] and activeInputs[IN_KEY.FORWARD] > 0 then
             speed = speed + speedStep * boost
        end
        if activeInputs[IN_KEY.BACK] and activeInputs[IN_KEY.BACK] > 0 then
             speed = speed - speedStep * boost
        end
        if activeInputs[IN_KEY.MOVERIGHT] and activeInputs[IN_KEY.MOVERIGHT] > 0 then
             roll = roll - rollStep
        end
        if activeInputs[IN_KEY.MOVELEFT] and activeInputs[IN_KEY.MOVELEFT] > 0 then
             roll = roll + rollStep
        end
        speed = speed * 0.95
        
        move(roll, speed)
    
        for key, _ in pairs(watchInKey) do
            if activeInputs[key] and activeInputs[key] > 0 then
                activeInputs[key] = activeInputs[key] + 1
            else
                activeInputs[key] = nil
            end
        end
    else
        activeInputs = {}
        driver = nil
    end
end


hook.add("KeyPress", "getKeyPress", function(ply, key)
    if watchInKey[key] and driver and  ply == driver then
        if activeInputs[key] == nil or activeInputs[key] == 0 then
            activeInputs[key] = 1
        end
    end
end)
hook.add("KeyRelease", "getKeyPress", function(ply, key)
    if watchInKey[key] and driver and  ply == driver then
        if activeInputs[key] and activeInputs[key] > 0 then
            activeInputs[key] = 0
        end
    end
end)







