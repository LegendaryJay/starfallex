--@name Slime Vehicle - InProgress
--@author Lil'Tugboat
--@include libs/criticalpd.txt
--@include libs/holo_manager.txt
--@include slime/arm_manager_class_beta.txt
--@include slime/body_manager_class.txt
--@include slime/bin_manager_class.txt

--@server
  
if SERVER then

    
    local translationGain = 500 -- Set to desired stiffness
    local rotationGain = 500 -- Set to desired rotational stiffness
    
    -- Defines "springs" of the slime
    local targetRadius = 50 -- Layer 1: slime pushes away from things this close
    local deadzoneRadius = 10 -- Layer 2" slime likes this area
    local stickyRadius = 20 -- Layer 3: slime reaches for things here
    
    local stickDelay = 10 -- how many ticks it sticks to a target
    
    -- sensor limiter
    local sensorCount = 30 -- how many sensor attempts there will be
    local binDegreeSize = 40 -- how wide in degrees the longitude & latitude are in sensor array
    local binCountSize = 1 -- how many sensors can fit between longitude & latitude lines
    local ArmBinCountSize = 3 -- how many arms can fit between longitude & latitude lines

    ---------------------------------------------------------
    
    local bodyRadius = 80

    
    local lastMovement = Vector()
    
    local driveDirection = Vector()
    local drivePos = Vector()
    
    -- helpers
    local EntityCriticalPD = require("libs/criticalpd.txt")
    
    local HoloManager = require("libs/holo_manager.txt")
    local holos = HoloManager:new()
    
    local ArmManager = require("slime/arm_manager_class_beta.txt")
    local arms = ArmManager:new()
    
    local BinMangager = require("slime/bin_manager_class.txt")
    local bins = BinMangager:new(binCountSize, binDegreeSize)
    
    local SlimeBodyManager = require("slime/body_manager_class.txt")
    local body = SlimeBodyManager:new(chip():localToWorld(Vector(0, 0, 100)), bodyRadius)
    
    
        //async checks
    local function checkQ(n)
        return quotaAverage() < quotaMax()*n
    end
    
    local function yieldCheck()
        if not checkQ(0.95) then
            coroutine.yield()
        end
    end
    
    //Spawn things
    --local chair = prop.createSeat(chip():localToWorld(Vector(0, 0, 100)), Angle(0, 0, 0), "models/sprops/geometry/sphere_42.mdl", false)
    local chair = prop.createSeat(body:getCenter(), Angle(0, 0, 0), "models/Gibs/HGIBS.mdl", false)
  
    
    local feet = {}

    holos:create(
        "driveHolo", 
        chair:getMassCenterW(),
        Angle(),
        "models/sprops/misc/axis_plane.mdl"
    )
    holos:setParent("driveHolo", chair)
    holos:setScale("driveHolo", Vector(0.3,0.3,0.3))

       

    holos:create(
        "targetRadius", 
        chair:getMassCenterW(),
        Angle(),
        "models/holograms/hq_sphere.mdl"
    )   
    holos:setScale("targetRadius", body:getSize(), true)
    holos:setParent("targetRadius", chair)
    holos:setColor("targetRadius", Color(80, 120, 80, 150))       

    holos:create(
        "deadzoneRadius", 
        chair:getMassCenterW(),
        Angle(),
        "models/holograms/hq_sphere.mdl"
    )   
    local combinedRadius = (deadzoneRadius + targetRadius) * 2
    holos:setScale("deadzoneRadius", Vector(combinedRadius,combinedRadius,combinedRadius), true)
    holos:setParent("deadzoneRadius", chair)
    holos:setColor("deadzoneRadius", Color(80, 200, 80, 100))
    
    
    -- Sets up Physics stuff
    local physObj = chair:getPhysicsObject()
    local pdController = EntityCriticalPD:new(physObj, translationGain, rotationGain)
    
    -- sets up visualization    
    function interpolateColor(x, colorA, colorB)
        return Color(
            math.lerp(x, colorA[1], colorB[1]),
            math.lerp(x, colorA[2], colorB[2]),
            math.lerp(x, colorA[3], colorB[3])
        )
    end

    
    -- setup Sensors
    local totalSensorVector = Vector()

    local spinItteration = 0 
    
    
    local function randomAngle()
        return Angle(math.random() * 180, math.random() * 360, 0)
    end
    
    local function randomVector()

        local x = 2 * math.random() - 1
        local y = 2 * math.random() - 1
        local z = 2 * math.random() - 1
    
        return Vector(x, y, z):getNormalized()
    end
    
    local function localTrace(localVector)
        return trace.line(body:getCenter(), body:getCenter() + localVector * (targetRadius + stickyRadius), chair)
    end 
    
    
    local targetVecTotal = Vector()
    local targetVecCount = 0
    
    local targetAngVecTotal = Vector()
    local targetAngVecCount = 0
    
    local function resetTarget()
        targetVecTotal = Vector()
        targetVecCount = 0
    end
    local function setTarget(vector, faceVector)
        targetVecTotal = targetVecTotal + vector
        
        
    end
    
    local function getTarget() 
        if targetVecTotal:isZero() then return Vector() end
        targetVector = targetVecTotal
        targetLength = targetVecTotal:getLength()
        targetNormal = targetVector / targetLength
        targetVector = targetNormal * math.min(50, targetLength)
        return (targetVecTotal ) * 100 - chair:getVelocity() * 2
    end
    
    
    local unusedHolos = {}
    local holoItt = 1
    
    
    arms:setOnCreate(function(key, arm)
        if #unusedHolos == 0 then
            arm.holo = holoItt
            holoItt = holoItt + 1
            holos:create(arm.holo)
            holos:setModel(arm.holo, "models/holograms/hq_icosphere.mdl")
            holos:setScale(arm.holo, Vector(1,1,1))
        else
            arm.holo = table.remove(unusedHolos, #unusedHolos)
            holos:setParent(arm.holo)
        end
    end)
    
    arms:setOnUpdate(function(key, arm)
        local vector = (arm.position - body:getCenter())
        local angle = vector:getAngle()
        arm.length = vector:getLength()
        arm.direction = vector / arm.length
        local binName = bins:getBinName(angle)
        if not arm.binName then
            bins:add(binName)
        else 
            bins:move(arm.binName, binName)
        end   
        arm.binName = binName
    end)
    
    arms:setOnRemove(function(key, arm)
        bins:remove(arm.binName)
        holos:setScale(arm.holo, Vector(0,0,0))
        holos:setPos(arm.holo, body:getCenter())
        holos:setParent(arm.holo, chair)
        table.insert(unusedHolos, arm.holo)
    end)
    
    
  
    local function sense()
        arms:foreach(function(key, arm) -- check all the arms

            local direction = arm.position - body:getCenter()
            
            local binName = bins:getBinName(direction:getAngle())
            if binName != arm.binName and bins:isFull(binName, ArmBinCountSize) then 
                arms:remove(key)
                return 
            end
            
            local tracer = localTrace(arm.position - body:getCenter())
            local entity = nil 
            
            if not tracer.Hit then
                arms:remove(key) -- remove it if it didnt hit anything
                return
            end
            
            if tracer.Entity then
                entity = tracer.Entity -- check for entity
            end
            
            arms:update(key, tracer.HitPos, entity) -- update
            arm.normal = tracer.HitNormal
        end)
        
        remainingSensors = sensorCount - #feet
        for i = 1, remainingSensors, 1 do
            -- set direction
            local direction = randomVector()
            local directionAngle = direction:getAngle()
            
            -- check bin and quit if full
            local binName = bins:getBinName(directionAngle)
            if bins:isFull(binName) then return end
            
            -- see if it hits anything, otherwise quiet
            local tracer = localTrace(direction)
            if not tracer.Hit then return end
    
            -- create arm
            local arm = arms:create(tracer.HitPos, tracer.Entity) 
            arm.normal = tracer.HitNormal
        end
    end

    local function armInteractions()
        local locationSum = Vector()
        local locationSumCount = 0
        
        arms:foreach(function(key, arm)         
            local weight = 1
            local target = body:getCenter()
            local color = Color(255,255,255)
            local scale = 0.3
            
            local dist = arm.length
        
            if dist < targetRadius then -- Too Close!
                
                arm.delay = 0
                color = interpolateColor(dist/targetRadius, Color(255,0,0), Color(255,255,255))
                --scale = 0
            elseif dist < (targetRadius + deadzoneRadius)  then
                arm.delay = 0
                -- perfect!
                --target = body:getCenter()
                --weight = 1
                --color = Color(255,255,255) 
                --scale = 0
            elseif dist < (targetRadius + deadzoneRadius + stickyRadius) then
                arm.delay = 0
                -- too far! (pull back)
                local percentAway = (dist - targetRadius - deadzoneRadius)/stickyRadius
                color = interpolateColor(percentAway,Color(255,255,255), Color(0,255,0))
                --scale = 0.1
            else
                arm.delay = (arm.delay or 0) + 1
                if arm.delay > stickDelay then
                    arms:remove(key)
                    return
                else
                    local percentAway = (dist - targetRadius - deadzoneRadius)/stickyRadius
                    color = interpolateColor(arm.delay/stickDelay,Color(0,255,0, 255), Color(0,0,0, 0))
                end 
            end
            if not arm.normal:isZero() then
                setTarget((arm.position + arm.normal * targetRadius - body:getCenter()) * 100 / dist^2, 1)--10 )
            end
            
            holos:setColor(arm.holo, color) 
            holos:setScale(arm.holo, Vector(scale,scale,scale))
            holos:setPos(arm.holo, arm.position)
            
            locationSum = locationSum + arm.position
            locationSumCount = locationSumCount + 1
        end)
        local direction
        local angle
        if locationSumCount > 0 then
            local target = locationSum/#arms.arms
            local vector = target - body:getCenter()
            local direction = vector:getNormalized()
            local axis = direction:cross(chair:getUp())
            angle = body:getAngles():rotateAroundAxis(axis, 100)
        else
            angle = Angle()
            angle[2] = body:getAngles()[2]
        end
        
        pdController:setTargetAng(angle) 
    end
                        
    
    --local sense = useSensors()
    hook.add("think", "sensors", function ()
        body:setCenter(chair:getMassCenterW())
        body:setAngles(chair:getAngles())
        sense()
        resetTarget()
        armInteractions()
    end)
    
    --movements
    local lastVector = Vector()
    
    local function getClampedVector(vec, maxMag)
    if vec == Vector() then return Vector() end
        local mag = math.min(math.abs(vec:getLength()), maxMag)
        local vector = vec:getNormalized() or Vector()

        vector:mul(mag)
        return vector
    end
    
    local lastMag = 0
    local lastVec = Vector()
    local lastPos = chair:getMassCenterW()

    timer.create("holoUpdate", 0.07, 0, function ()
        holos:foreach( function(index)
            holos:applyChanges(index)
        end)
    end)
-- add color change and make distance cheaper
        
        
    hook.add("think", "movements", function ()
        local target = getTarget()
        resetTarget()
        if not target:isZero() then 
            chair:applyForceCenter(target)
            
            --pdController:setTargetPos(target)
            --pdController:simulate()
        end
    end)
    

    local driver
    local function set_driver(ply, vehicle, role)
        if vehicle ~= chair then return end 
        driver = role and ply
    end

    hook.add("PlayerEnteredVehicle", "SetDriver", set_driver)
    hook.add("PlayerLeaveVehicle", "SetDriver", set_driver)
    

    
    -- Map of inputs and their acceleration values / forces
    local inputs = {
        [IN_KEY.FORWARD] = Vector(1, 0 ,0),
        [IN_KEY.BACK] = Vector(-1, 0, 0),
        [IN_KEY.MOVELEFT] = Vector( 0, 1, 0),
        [IN_KEY.MOVERIGHT] = Vector(0, -1, 0)
    }
    local outputs = {}
    
    
    hook.add("KeyPress", "KeyPress", function(ply, key)
        if ply ~= driver then return end 
        if inputs[key] then
            outputs[key] = 1
        end
    end)
    
    hook.add("KeyRelease", "KeyRelease", function(ply, key)
        if ply ~= driver then return end 
        if inputs[key] then
            outputs[key] = 0
        end
    end)
    
    
    hook.add("Tick", "Update", function()
        driveDirection = Vector()
        for key, value in pairs(outputs) do
            driveDirection = driveDirection + inputs[key] * value
        end
        drivePos = chair:getMassCenterW() + driveDirection * 50
        --holos:setPos("driveHolo", drivePos)
    end)


end



