--@name Arm Manager Class
--@author Lil'Tugboat
--@server

local SlimeArmManager = class("SlimeArmManager")
function SlimeArmManager:initialize(onCreate, onUpdate, onRemove)
    self.arms = {}
    
    if not onCreate then onCreate = function()end end
    if not onUpdate then onUpdate = function()end end
    if not onRemove then onRemove = function()end end
    
    self.onCreate = onCreate
    self.onUpdate = onUpdate
    self.onRemove = onRemove
    
    return self
end
 
function SlimeArmManager:update(key, position, entity)
    local arm = self.arms[key]
    if not arm then return false end
    
    if isValid(entity) then
        arm.hasEntity = true
        if entity == arm.attachedEntity then
            position = entity:localToWorld(arm.localEntityVector)
        else
            arm.attachedEntity = entity
            arm.localEntityVector = entity:worldToLocal(position)
        end
    else
        arm.hasEntity = false
        arm.attachedEntity = nil
        arm.localEntityVector = nil
    end 
    arm.position = position
    self.onUpdate(key, arm)
    return arm
end

function SlimeArmManager:create(position, entity)
        local arm = {}
        local key = table.insert(self.arms, arm) 
        self:update(key, position, entity)
        self.onCreate(key, arm)
        return arm
end    

function SlimeArmManager:remove(key)
    self.onRemove(key, self.arms[key])
    local remove = table.remove(self.arms, key)
    if remove then return true end
    return false
end

function SlimeArmManager:foreach(func)
    for key, value in pairs(self.arms) do
        func(key, value)
    end
end
function SlimeArmManager:getArm(key)
    return self.arms[key]
end

return SlimeArmManager