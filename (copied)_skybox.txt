--@name Personal Build Area
--@author
--@shared



if SERVER then
    local chip = chip()
    
    local propMdl = "models/sprops/rectangles/size_10/rect_480x480x3.mdl"
    
    -- This measures the size of the above prop
    local measuringHolo = hologram.create(Vector(), Angle(), propMdl)
    local measuringHoloSize = measuringHolo:obbSize()
    local halfWallHeight = math.max(measuringHoloSize[1],measuringHoloSize[2],measuringHoloSize[3]) * 0.5
    local halfWallWidth = math.min(measuringHoloSize[1],measuringHoloSize[2],measuringHoloSize[3]) * 0.85
    local wallBoxCenter = measuringHolo:obbCenter()
    measuringHolo:remove()
    
    local floorPos = chip:obbCenterW() - Vector(0, 0, chip:obbSize()[3] +  halfWallWidth) * 0.5

    local template = {
        front = {ang = Angle(0, -90, 90), vec = Vector(1, 0,1)},
        right = {ang = Angle(0, -0, 90), vec = Vector(0, 1, 1)},
        back = {ang = Angle(0, 90, 90), vec = Vector(-1, 0, 1)},
        left = {ang = Angle(0, 180, 90), vec = Vector(0, -1, 1)},
        top = {ang = Angle(180, 0, 0), vec = Vector(0, 0, 2)},
        bottom = {ang = Angle(0, 0, 0), vec = Vector(0, 0, 0)}
    }

    local screens = {}
    local function createScreens()
        for key, t in pairs(template) do
            local ang = t.ang
            local pos = t.vec
            local screen = prop.createComponent(floorPos + wallBoxCenter + pos * halfWallHeight, ang, "starfall_screen", propMdl, true)
            screen:linkComponent(chip)
            screen:setSolid(false)
            screen:setMaterial("editor/flat")
            screen:setDrawShadow(false)
            coroutine.yield()
        end
    end

    local screenCoroutine = coroutine.create(createScreens)
    hook.add("think", "spawnScreens", function()
        if prop.canSpawn() then 
            if coroutine.status(screenCoroutine) ~= "dead" then
                coroutine.resume(screenCoroutine)
            else 
                 hook.remove("think", "spawnScreens")
            end
        end
    end)
else
    local screens = {}
    local wallMat = "models/props_animated_breakable/smokestack/brickwall002a"
    local floorMat = "sprops/textures/sprops_metal6" --"phoenix_storms/pack2/train_floor"
    
    chip = chip()
    
    local skylist = {
            "skybox/starfield",
        "skybox/sky_day01_07|",
        "skybox/sky_borealis01|",
        "skybox/sky_wasteland02|"
    }
    sky = skylist[4] 
       
    local floorlist = {
        "phoenix_storms/pack2/train_floor",
        "phoenix_storms/ps_grass",
        "models/XQM/WoodPlankTexture"
    }
    floor = floorlist[2]

    
    local scale = 5000
    local tex = { 
        render.createMaterial(string.replace(sky, "|","rt")), -- rt
        render.createMaterial(string.replace(sky, "|","bk")), -- bk
        render.createMaterial(string.replace(sky, "|","lf")), -- lf
        render.createMaterial(string.replace(sky, "|","ft")), -- ft
        render.createMaterial(string.replace(sky, "|","up")), -- up
        render.createMaterial(floor), --register grass material
    }
    
    local m = {}
    local angles = {--define skybox angles
        Angle(0,0,-90),
        Angle(0,90,-90),
        Angle(0,180,-90),
        Angle(0,-90,-90),
        Angle(0,0,0),
        Angle(0,0,180)
    }
    
    hook.add("render","",function()
        for i=1, 6 do
            m[i] = Matrix()
            if i~=6 then -- if its parsing the skybox
                local pos = eyePos()+Vector(0,0,-scale/10)
                m[i]:translate(pos)
                m[i]:scale(Vector(scale,scale,scale))
            else -- if its parsing the ground
                
                m[i]:translate(chip:getPos()+Vector(0,0,25000))
                m[i]:scale(Vector(50000,50000,50000))
                
            end
            m[i]:rotate(angles[i]) -- rotate according to what wall it is
            m[i]:translate(Vector(-0.5,-0.5,0.5))
        end
        
        for i=1, 6 do
            render.pushViewMatrix({type = "3D", zfar = 299999})
            render.pushMatrix(m[i], true)
            render.setMaterial(tex[i]) -- set the texture for the wall/ground
            if i~=6 then
                render.setColor(Color(255,255,255,255))
                render.drawTexturedRectUV(0,0,1,1,0.0007,0.0007,1,1) -- draw the skybox walls
            else
                render.setColor(Color(255,255,255,255))
                render.drawTexturedRectUV(0,0,1,1,0,0,500,500) -- draw the ground
            end
            render.popMatrix()
            render.popViewMatrix()
        end
    end)
    
    local lastMat = ""
    hook.add("think", "floor", function()
        mat = chip:getMaterial()
        if lastMat != mat then
            tex[6]:destroy()
            if mat then 
                tex[6] = render.createMaterial(mat)
            else
                tex[6] = render.createMaterial(floor)
            end
        end
    end)

end