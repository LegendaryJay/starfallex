--@name Tiny Wall Room
--@author Lil'Tugboat
--@shared

--[[models/debug/debugwhite
debug/debugwireframe
debug/debugtranslucentsinglecolor
models/shiny
models/props_c17/fisheyelens
models/effects/portalrift_sheet
models/props_combine/combine_door01_glass
phoenix_storms/metalfence004a
models/shadertest/predator
effects/flashlight/caustics
effects/tvscreen_noise001a
effects/prisonmap_disp
engine/writez_model
effects/com_shield003a
effects/dodge_overlay
overlays/shorefx/shorewave
hlmv/debugmrmwireframe
effects/combinedisplay_dump
models/effects/vortshield
models/props_lab/projector_noise
vgui/achievements/ep1_beat_citadelcore
dev/dev_energyflow
effects/tvscreen_noise003a
vgui/screens/radar
editor/flat
debug/debugdrawflat
models/npcs/personality_sphere/personality_sphere_lights03
Models/effects/comball_sphere
models/player/shared/ice_player
models/props_dev/test_graygrid
engine/shadowbuild
models/effects/portalfunnel_sheet
models/perftest/high_poly_test
models/cstrike/ct_urban_glass
sprops/trans/misc/ls_m2
models/combine_scanner/scanner_eye
phoenix_storms/chrome
phoenix_storms/stripes
models/effects/muzzleflash/blurmuzzle
effects/flashlight/tech
phoenix_storms/scrnspace
dev/dev_prisontvoverlay003
models/props_mvm/cave_waterfall
models/effects/resist_shield/mvm_resist_shield
effects/combine_binocoverlay
models/player/shared/gold_player
effects/security_noise2
phoenix_storms/trains/track_plateside
sprops/textures/sprops_metal6
models/cheeze/buttons2/pwr_blue
models/cheeze/buttons2/pwr_green
models/cheeze/buttons2/pwr_red
models/cstrike/ct_sas_glass
sprops/trans/misc/ls_m2
debug/env_cubemap_model_translucent_fountain
debug/env_cubemap_model_translucent
engine/modulatesinglecolor
models/props_highway/overpass_1
models/props_gameplay/cap_point_base_blue
models/props_gameplay/cap_point_base_red
phoenix_storms/pack2/train_floor
perftest/rockcliff02b
models/props_animated_breakable/smokestack/brick_chimney01
models/props_animated_breakable/smokestack/brickwall002a
models/props_c17/furniturefabric002a
models/props_c17/furniturefabric003a
models/shadertest/vertexlitselfilluminatedtexture
models/shadertest/vertexlitselfillummaskenvmaptex
models/shadertest/envball_6
models/shadertest/envball_3
models/props_factory/toxic_warning_sign

]]







if SERVER then
    local chip = chip()
    local vec, ang = localToWorld(Vector(0, 0, 95), Angle(-90, 0, 0), chip:getPos(), chip:getAngles())
    local screen = prop.createComponent(vec, ang, "starfall_screen", "models/sprops/rectangles_superthin/size_6/rect_96x96.mdl", true) 
    screen:linkComponent(chip)
    screen:setNocollideAll(true)
    screen:setMass(999)
    screen:setMaterial("editor/flat")
    --constraint.weld(screen, chip)
    --chip:setFrozen(false)
    --screen:setParent(chip)
    
    

else
    local screen
    
    local wallMat = "models/props_animated_breakable/smokestack/brickwall002a"
    local floorMat = "sprops/textures/sprops_metal6"
    local outsideLadder
    local props = {
        {  -- floor
            model = "models/sprops/rectangles_superthin/size_6/rect_96x96.mdl",
            angles = Angle(0, 0, 0),
            position = Vector(0, 0, 0),
            mat = floorMat
        },
        {   -- back
            model = "models/sprops/rectangles_superthin/size_6/rect_96x96.mdl",
            angles = Angle(-90, 0, 90),
            position = Vector(0, -48, 48),
            mat = wallMat
        },
        {   --left
            model = "models/sprops/rectangles_superthin/size_6/rect_96x96.mdl",
            angles = Angle(90, 0, 0),
            position = Vector(48, 0, 48),
            mat = wallMat
        },
        {   -- right
            model = "models/sprops/rectangles_superthin/size_6/rect_96x96.mdl",
            angles = Angle(90, 0, 0),
            position = Vector(-48, 0, 48),
            mat = wallMat
        },

--[[
        {   -- front
            model = "models/sprops/rectangles_superthin/size_6/rect_96x96.mdl",
            angles = Angle(90, 0, -90),
            position = Vector(0, 48, 48),
            mat = wallMat
        },
]]

        {   -- Painting
            model = "models/maxofs2d/gm_painting.mdl",
            angles = Angle(0, 90, 0),
            position = Vector(0, -48, 55)
        },
        {   -- Guitar
            model = "models/props_phx/misc/fender.mdl",
            angles = Angle(80, 0, 0),
            position = Vector(-45.5, 20, 27)
        },
        { 
            model = "models/items/item_item_crate.mdl",
            angles = Angle(0, -180, 0),
            position = Vector(25, -30, 0)
        },
        { 
            model = "models/props_interiors/furniture_couch02a.mdl",
            angles = Angle(0, 45, 0),
            position = Vector(-25, 48-63, 21.5)
        },
    
        {   -- upright shoe
            model = "models/props_junk/shoe001a.mdl",
            angles = Angle(0, 4, 0),
            position = Vector(38, 12, 5)
        },
        {   -- fallen shoe
            model = "models/props_junk/shoe001a.mdl",
            angles = Angle(-5, -30, 75),
            position = Vector(33, -4, 2)
        },
        { 
            model = "models/props_lab/corkboard001.mdl",
            angles = Angle(0, -180, 0),
            position = Vector(48, 0, 48)
        },
        {   -- bih jug
            model = "models/props_junk/glassjug01.mdl",
            angles = Angle(-1, 143, 0),
            position = Vector(1, -37, 0)
        },
        {   -- left
            model = "models/props_junk/glassbottle01a.mdl",
            angles = Angle(0, 50, 0),
            position = Vector(32, -35, 30)
        },
        {   -- right
            model = "models/props_junk/glassbottle01a.mdl",
            angles = Angle(0, 62, 0 ),
            position = Vector(25, -41, 30)
        },
        {   -- back
            model = "models/props_junk/popcan01a.mdl",
            angles = Angle(0, -3, 10),
            position = Vector(19, -32, 27.2)
        },
        {   -- ledge
            model = "models/props_junk/popcan01a.mdl",
            angles = Angle(0, 97, 0),
            position = Vector(10, -28, 27.4)
        },
        {   -- front left
            model = "models/props_junk/popcan01a.mdl",
            angles = Angle(0, 45, 0),
            position = Vector(19, -22, 26.8)
        },
        {   -- fallen
            model = "models/props_junk/popcan01a.mdl",
            angles = Angle(30, 18, 90),
            position = Vector(15, -36, 25.5)
        },
        {   -- front right
            model = "models/props_junk/popcan01a.mdl",
            angles = Angle(0, 45, 0),
            position = Vector(16, -24, 26.8)
        },
        { 
            model = "models/maxofs2d/companion_doll.mdl",
            angles = Angle(0, 70, 0),
            position = Vector(-25, -15, 16.5)
        },
        
        {   -- 
            model = "models/sprops/rectangles_thin/size_1/rect_3x96x1_5.mdl",
            mat = "sprops/textures/sprops_rubber2",
            angles = Angle(0, 0, 0),
            position = Vector(0, 47.26, 96),
            draw = true
        },
--[[
        {   -- Bottom
            model = "models/sprops/rectangles_thin/size_1/rect_3x96x1_5.mdl",
            mat = "sprops/textures/sprops_rubber2",
            angles = Angle(0, 0, 0),
            position = Vector(0, 47.26, 0),
            draw = true
        },
]]

        {   -- left
            model = "models/sprops/rectangles_thin/size_1/rect_3x96x1_5.mdl",
            mat = "sprops/textures/sprops_rubber2",
            angles = Angle(90, 90, 90),
            position = Vector(47.26, 47.26, 48),
            draw = true
        },
        {   -- right
            model = "models/sprops/rectangles_thin/size_1/rect_3x96x1_5.mdl",
            mat = "sprops/textures/sprops_rubber2",
            angles = Angle(90, 90, 90),
            position = Vector(-47.26, 47.26, 48),
            draw = true
        }
    }

    
    local holos = {}
    

    function spawnHolos()
        local holoOffset = Vector(0,-48,-48.75)
        for i, p in ipairs(props) do
            local vec, ang = localToWorld(p.position + holoOffset, p.angles + Angle(0,0,0), screen:obbCenterW(), screen:localToWorldAngles(Angle(0, 90, 90)))
            local holo = hologram.create(vec, ang, p.model)
            holos[i] = holo
            if not p.draw then
                holos[i]:setNoDraw(true)
            end
            
            if p.mat then holos[i]:setMaterial(p.mat) end
            
            if p.func then
                p.func(i, holos[i])
            end
            
            local parent = p.parent or screen
            holos[i]:setParent(parent)
        end
    end
    
    function draw()
        for index, holo in ipairs( holos ) do
            holo:draw()
        end
    end
    
    function spawnHoloHook()
            spawnHolos()
            hook.remove("think", "spawnProps")
            hook.add("render", "roomrender", draw)
    end
    function getScreenHook()
        screen = render:getScreenEntity()
        hook.remove("render", "firstRun")
        hook.add("think", "spawnProps", spawnHoloHook)
    end
    
    hook.add("render", "firstRun", getScreenHook) 

end