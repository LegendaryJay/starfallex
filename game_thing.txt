--@name Game thing
--@author Lil'Tugboat
--@server

-- costs 1x to buy
-- retreaval give 2x
-- there will be a shop


-- roadmap:
-- spawn item

local optionsGap = 10

local shop = {
    {
        model = "models/props_c17/oildrum001.mdl",
        weight = 250,
        key = "oil",
        price = 20
    },
    {
        model = "models/props_junk/metalgascan.mdl",
        weight = 250,
        key = "gas"
    },
    {
        model = "models/props_c17/canister_propane01a.mdl",
        weight = 200,
        key = "diesel"
    },
    {
        model = "models/props/de_prodigy/concretebags4.mdl",
        weight = 200,
        key = "Concrete Pallette SM"
    },
    {
        model = "models/props/de_prodigy/concretebags3.mdl",
        weight = 500,
        key = "Concrete Pallette MD"
    },
    {
        model = "models/props/de_prodigy/concretebags2.mdl",
        weight = 650,
        key = "Concrete Pallette LG"
    },
    {
        model = "models/props/de_prodigy/concretebags.mdl",
        weight = 900,
        key = "Concrete Pallette XL"
    },   
}


spawnZone = prop.create(chip():getPos() + Vector( 0, 100, 0), Angle(), "models/sprops/rectangles/size_1_5/rect_6x12x3.mdl")
spawnZone:setColor(Color(0,255,0))
spawnZone:setMaterial("phoenix_storms/fender_white")

local options = {}
totalWidth = 0
local halfWidth = 0
for index, property in ipairs(shop) do
    holo = hologram.create(Vector(), Angle(), property.model)
    totalWidth = totalWidth + holo:obbSize()[1]
    holo:setParent(spawnZone)
    holo:setColor(Color(200,200,255, 150))
    options[property.key] = {
        holo = holo,
        model = shop[index].model,
        weight = shop[index].weight,
        index = index,
        width = holo:obbSize()[1],
    }
    if index == 1 then
        halfWidth = -holo:obbSize()[1] * 0.5
    end
end
totalWidth = totalWidth - optionsGap
halfWidth = halfWidth + totalWidth * 0.5
for index, property in ipairs(shop) do
    oData = options[property.key]
    holo = oData.holo
    width = oData.width
    
    offset = halfWidth + width * 0.5 - totalWidth
    totalWidth = totalWidth - width - optionsGap
    
    oData.center = Vector(offset, 0, 0.5 * holo:obbSize()[3]) - holo:obbCenter()
    holo:setPos(spawnZone:localToWorld(oData.center))
end





retreavalZone = prop.create(chip():getPos() + Vector( 0, -100, 0), Angle(), "models/sprops/rectangles/size_90/rect_90x90x3.mdl")
retreavalZone:setColor(Color(255,0, 0))
retreavalZone:setMaterial("phoenix_storms/fender_white")


retreaveSize = Vector(1,1,1) * math.max(retreavalZone:obbSize()[1], retreavalZone:obbSize()[2], retreavalZone:obbSize()[3])
retreavalZoneHolo = hologram.create(Vector(), Angle(), "models/hunter/blocks/cube8x8x8.mdl", Vector())
rzhScale = retreaveSize / retreavalZoneHolo:obbSize()
retreavalZoneHolo:setParent(retreavalZone)
retreavalZoneHolo:setAngles(retreavalZone:getAngles())
retreavalZoneHolo:setPos(retreavalZone:localToWorld(-retreavalZoneHolo:obbCenter() * rzhScale +  Vector(0,0,retreaveSize[3]) * 0.5))
retreavalZoneHolo:setSize(retreaveSize)
retreavalZoneHolo:setMaterial("phoenix_storms/fender_white")
retreavalZoneHolo:setColor(retreavalZone:getColor():setA(50))




local spawned = {}
local spawnCount = 0
function spawnItem(index)
    local itemSettings = options[index]
    item = prop.create(spawnZone:localToWorld(itemSettings.center), Angle(), itemSettings.model)
    item:setMass(itemSettings.weight)
    table.insert(spawned, item)
    spawnCount = spawnCount + 1
end
spawnItem("gas")
hook.add("think", "deleteListener", function()
        radius = retreaveSize[1] * 0.5
        center = retreavalZone:localToWorld(Vector(0, 0, radius))
        for key, item in pairs(spawned) do
            if (item:obbCenterW() - center):getLength() < radius then
                item:remove()
                table.remove(spawned, key)
                spawnItem("oil")
            end
        end
end)

hook.add("KeyPress", "checkItemSpawn", function(ply, key)
--    if key == IN_KEY.USE then
--        t = trace.intersectRayWithOBB(ply:getEyePos(), ply:getEyeAngles():getForward(), Vector boxOrigin, Angle boxAngles, Vector boxMins, Vector boxMaxs)

 end)
