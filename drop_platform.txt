--@name Drop Platform
--@author Lil'Tugboat
--@shared

local DropPlatform = class("DropPlatform")
function DropPlatform:initialize(name, entity, controller)
    self.name = name
    self.entity = entity
    self.controller = controller
    self.packages = {}

    self.holo = hologram.create(Vector(), Angle(), "models/hunter/blocks/cube8x8x8.mdl", Vector())

    self.size = entity:obbSize()
    self.zoneSize = Vector(1, 1, 1) * math.max(self.size[1], self.size[2], self.size[3])
    self.zoneRadius = self.zoneSize[1] * 0.5
    self.holoScale = self.zoneSize / self.holo:obbSize()

    self.holo:setScale(self.holoScale:setX(-self.holoScale[1]))
    self.holo:setMaterial("phoenix_storms/fender_white")
    self.holo:setColor(Color(255, 0, 0, 50))

    self:updatePos()

    self:startMonitoringPackages()
    
    controller:addDrop(self)
    return self
end

function DropPlatform:updatePos()
    self.center = self.entity:obbCenterW()
    self.pos = self.entity:getPos()
    self.ang = self.entity:getAngles()
    self.min = self.entity:obbMins()
    self.max = self.entity:obbMaxs()

    self.zoneCenter = self.center + self.entity:getUp() * self.zoneRadius

    self.holo:setAngles(self.entity:getAngles())
    self.holo:setPos(self.entity:localToWorld(-self.holo:obbCenter() * self.holoScale + Vector(0, 0, self.zoneSize[3]) * 0.5))
end

function DropPlatform.create(name, pos, ang, mdl, controller)
    local entity = prop.create(pos, ang, mdl, true)
    return DropPlatform:new(name, entity, controller)
end

function DropPlatform:addPackage(package)
    table.insert(self.packages, package)
end

function DropPlatform:startMonitoringPackages()
    hook.add("think", self.name .. "_sellCheck", function()
        self:checkAndSellPackages()
    end)
end

function DropPlatform:checkAndSellPackages()
    for _, package in ipairs(self.packages) do
        if package:getDistance(self.zoneCenter) <= self.zoneRadius then
            package:sell()
            self.controller:removePackage(package)
        end
    end
end

return DropPlatform