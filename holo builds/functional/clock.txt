--@name AnalogueClock
--@author Lil'Tugboat
--@shared

if SERVER then
    local scale = 100
    local timeZoneOffset = 2 -- offset from GMT
    
    -----------
    
    local radius = 23
    local center = chip():getPos() + Vector(0,0,50) * scale
    
    function twoDAngToVector(ang)
        rad = math.rad(ang)
        return Vector(0, math.sin(rad), math.cos(rad)) * radius + Vector(0.4,0,0)
    end
    
    local numberAng = Angle(0,-90,0)
    local numberScale = Vector(1,0,1) * 0.6
    local numberSep = 2.5
    local numberMat = "WTP/paint_1"
    local numberColor = Color(0,0,0)
    
    
    local hourLength = 18 
    local minuteLength = 24 
    local secondLength = 27
    
    
    propBase = prop.create(center, Angle(), "models/sprops/geometry/superthin/discs/fdisc_60.mdl", true)
    propBase:setColor(Color(0,0,0,0))
    template = {
        {
            name = "base",
            model = "models/props_trainstation/trainstation_clock001.mdl",
            vector = Vector(),
            angle = Angle(0,90,0),
            parent = propBase
        },
        {
            name = "backplate",
            model = "models/sprops/geometry/superthin/discs/fdisc_60.mdl",
            vector = Vector(0.2,0,0),
            angle = Angle(0,90,0),
            mat = "WTP/paint_1",
            scale = Vector(1, 0, 1),
            parent = "base"
        },      
        {
            name = "minute",
            model = "models/sprops/cuboids/height12/size_1/cube_12x12x12.mdl",
            vector = Vector(0,0,minuteLength * 0.5),
            angle = Angle(0,90,0),
            mat = "WTP/paint_1",
            size = Vector(0,0.6, minuteLength),
            color = Color(0, 0,0),
            parent = "base"
        },
        {
            name = "second",
            model = "models/sprops/cuboids/height12/size_1/cube_12x12x12.mdl",
            vector = Vector(0,0,secondLength * 0.5),
            angle = Angle(0,90,0),
            mat = "WTP/paint_1",
            size = Vector(0,0.2, secondLength),
            color = Color(255, 0,0),
            parent = "base"
        },
        {
            name = "hour",
            model = "models/sprops/cuboids/height12/size_1/cube_12x12x12.mdl",
            vector = Vector(0,0,hourLength * 0.5),
            angle = Angle(0,90,0),
            mat = "WTP/paint_1",
            size = Vector(0,0.6, hourLength),
            color = Color(0, 0,0),
            parent = "base"
        },
        {
            name = "nub",
            model = "models/sprops/cylinders/size_3/cylinder_6x3.mdl",
            vector = Vector(0.5,0,0),
            scale = Vector(0.3,0.3,0.2),
            angle = Angle(90,0,0),
            mat = "WTP/paint_1",
            color = Color(100,100,100),
            parent = "base"
        },
        {
            name = "twelve_ten",
            model = "models/sprops/misc/alphanum/alphanum_1.mdl",
            vector = twoDAngToVector(0) - Vector(0, numberSep, 0),
            angle = numberAng,
            scale = numberScale,
            mat = numberMat,
            color = numberColor,
            parent = "base"
        },
        {
            name = "twelve_two",
            model = "models/sprops/misc/alphanum/alphanum_2.mdl",
            vector = twoDAngToVector(0) + Vector(0, numberSep, 0),
            angle = numberAng,
            scale = numberScale,
            mat = numberMat,
            color = numberColor,
            parent = "base"
        },
        {
            name = "one",
            model = "models/sprops/misc/alphanum/alphanum_1.mdl",
            vector = twoDAngToVector(30),
            angle = numberAng,
                    scale = numberScale,
            mat = numberMat,
            color = numberColor,
            parent = "base"
        },
        {
            name = "two",
            model = "models/sprops/misc/alphanum/alphanum_2.mdl",
            vector = twoDAngToVector(60),
            angle = numberAng,
            scale = numberScale,
            mat = numberMat,
            color = numberColor,
            parent = "base"
        },
        {
            name = "three",
            model = "models/sprops/misc/alphanum/alphanum_3.mdl",
            vector = twoDAngToVector(90),
            angle = numberAng,
            scale = numberScale,
            mat = numberMat,
            color = numberColor,
            parent = "base"
        },
        {
            name = "four",
            model = "models/sprops/misc/alphanum/alphanum_4.mdl",
            vector = twoDAngToVector(120),
            angle = numberAng,
            scale = numberScale,
            mat = numberMat,
            color = numberColor,
            parent = "base"
        },
        {
            name = "five",
            model = "models/sprops/misc/alphanum/alphanum_5.mdl",
            vector = twoDAngToVector(150),
            angle = numberAng,
            scale = numberScale,
            mat = numberMat,
            color = numberColor,
            parent = "base"
        },
        {
            name = "six",
            model = "models/sprops/misc/alphanum/alphanum_6.mdl",
            vector = twoDAngToVector(180),
            angle = numberAng,
            scale = numberScale,
            mat = numberMat,
            color = numberColor,
            parent = "base"
        },
        {
            name = "seven",
            model = "models/sprops/misc/alphanum/alphanum_7.mdl",
            vector = twoDAngToVector(210),
            angle = numberAng,
            scale = numberScale,
            mat = numberMat,
            color = numberColor,
            parent = "base"
        },
        {
            name = "eight",
            model = "models/sprops/misc/alphanum/alphanum_8.mdl",
            vector = twoDAngToVector(240),
            angle = numberAng,
            scale = numberScale,
            mat = numberMat,
            color = numberColor,
            parent = "base"
        },
        {
            name = "nine",
            model = "models/sprops/misc/alphanum/alphanum_9.mdl",
            vector = twoDAngToVector(270),
            angle = numberAng,
            scale = numberScale,
            mat = numberMat,
            color = numberColor,
            parent = "base"
        },
        {
            name = "ten_ten",
            model = "models/sprops/misc/alphanum/alphanum_1.mdl",
            vector = twoDAngToVector(300) - Vector(0, numberSep, 0),
            angle = numberAng,
            scale = numberScale,
            mat = numberMat,
            color = numberColor,
            parent = "base"
        },
        {
            name = "ten_zero",
            model = "models/sprops/misc/alphanum/alphanum_0.mdl",
            vector = twoDAngToVector(300) + Vector(0, numberSep, 0),
            angle = numberAng,
            scale = numberScale,
            mat = numberMat,
            color = numberColor,
            parent = "base"
        },
        {
            name = "eleven_ten",
            model = "models/sprops/misc/alphanum/alphanum_1.mdl",
            vector = twoDAngToVector(330) - Vector(0, numberSep, 0),
            angle = numberAng,
            scale = numberScale,
            mat = numberMat,
            color = numberColor,
            parent = "base"
        },
        {
            name = "eleven_one",
            model = "models/sprops/misc/alphanum/alphanum_1.mdl",
            vector = twoDAngToVector(330) + Vector(0, numberSep, 0),
            angle = numberAng,
            scale = numberScale,
            mat = numberMat,
            color = numberColor,
            parent = "base"
        }
    }
    
    holos = {}
    for _, value in ipairs(template) do
        local pos = center + (value.vector or Vector()) * scale
        local ang = value.angle
        local parent = nil
        if value.parent then
            if type(value.parent) == "string" then
                parent = holos[value.parent]
            else
                parent = value.parent
            end
            pos = parent:localToWorld(value.vector * scale)
            ang = parent:localToWorldAngles(value.angle)
        end
        local holo = hologram.create(
            pos, 
            ang, 
            value.model, 
            (value.scale or Vector(1,1,1)) * scale
        )
        
        if parent then
            holo:setParent(parent)
        end
        holo:setMaterial(value.mat or "")
        holo:setColor(value.color or Color(255,255,255))
        if value.size then
            holo:setSize(value.size * scale)
        end
        holos[value.name] = holo
    end
    
    local lastTime = 0
    hook.add("think", "setTime", function()
        base = holos.base
        local time = os.time()
        if time != lastTime then
            lastTime = time
            local seconds = time % 60
            local secondAng = -6 * seconds
            local secRad = math.rad(-secondAng)
            holos.second:setAngles(base:localToWorldAngles(Angle(0, 0, secondAng)))
            holos.second:setPos(base:localToWorld(Vector(0, math.sin(secRad), math.cos(secRad)) * secondLength * 0.5* scale + Vector(0.7, 0, 0)* scale))
            
            local minutes = time % 3600
            local minuteAng = -minutes / 10
            local minRad = math.rad(-minuteAng)
            
            holos.minute:setAngles(base:localToWorldAngles(Angle(0, 0, minuteAng)))
            holos.minute:setPos(base:localToWorld(Vector(0, math.sin(minRad), math.cos(minRad)) * minuteLength * 0.5* scale + Vector(0.65, 0, 0)* scale))
                 
            local hours = (3600 * (24 + timeZoneOffset) + time) % 43200
            local hourAng = -hours / 120
            local hourRad = math.rad(-hourAng)
            holos.hour:setAngles(base:localToWorldAngles(Angle(0, 0, hourAng)))
            holos.hour:setPos(base:localToWorld(Vector(0, math.sin(hourRad), math.cos(hourRad)) * hourLength * 0.5 * scale + Vector(0.6, 0, 0)* scale))
        end
    end)
else
    

end