--@name Sanctuary
--@author Lil'Tugboat
--@shared
--@model models/sprops/misc/domes/size_1/dome_12x6.mdl

local floorColor = Color(334,0.9,0.35):hsvToRGB()

if SERVER then
    local chip = chip()
    --chip:setSolid(false)
    timer.create("sf update", 1, 1, function() chip:setColor(floorColor) end)
     
    local propMdl = "models/hunter/plates/plate32x32.mdl"
    
    -- This measures the size of the above prop
    local measuringHolo = hologram.create(Vector(), Angle(), propMdl)
    local measuringHoloSize = measuringHolo:obbSize()
    local halfWallHeight = math.max(measuringHoloSize[1],measuringHoloSize[2],measuringHoloSize[3]) * 0.5
    local halfWallWidth = math.min(measuringHoloSize[1],measuringHoloSize[2],measuringHoloSize[3]) * 0.5
    local wallBoxCenter = measuringHolo:obbCenter()
    measuringHolo:remove()
    
    local floorPos = chip:obbCenterW() - Vector(0, 0, chip:obbSize()[3] * 0.5)

    local template = {
        front = {ang = Angle(0, -90, 90), vec = Vector(1, 0,1)},
        right = {ang = Angle(0, -0, 90), vec = Vector(0, 1, 1)},
        back = {ang = Angle(0, 90, 90), vec = Vector(-1, 0, 1)},
        left = {ang = Angle(0, 180, 90), vec = Vector(0, -1, 1)},
        top = {ang = Angle(180, 0, 0), vec = Vector(0, 0, 2)},
        bottom = {ang = Angle(0, 0, 0), vec = Vector(0, 0, 0)}
    }
    
    local screens = {}
    local function createScreens()
        for key, t in pairs(template) do
            local ang = t.ang
            local pos = t.vec
            local screen = prop.createComponent(floorPos + pos * halfWallHeight + Vector(0,0,-halfWallWidth * 1.7 - wallBoxCenter[3]), ang, "starfall_screen", propMdl, true)
            screen:linkComponent(chip)
            screen:setSolid(false)
            screen:setMaterial("editor/flat")
            screen:setDrawShadow(false)
            coroutine.yield()
        end
    end

    local screenCoroutine = coroutine.create(createScreens)
    hook.add("think", "spawnScreens", function()
        if prop.canSpawn() then 
            if coroutine.status(screenCoroutine) ~= "dead" then
                coroutine.resume(screenCoroutine)
            else 
                 hook.remove("think", "spawnScreens")
            end
        end
    end)
else
    chip = chip()
    floorPos = chip:obbCenterW() - Vector(0, 0, chip:obbSize()[3] * 0.5)
    
    local skyMatrix = {}
    
    skyMats = {
        render.createMaterial("https://i.imgur.com/qixFKFN.png"), -- lf
        render.createMaterial("https://i.imgur.com/JyOYiac.png"), -- bk
        render.createMaterial("https://i.imgur.com/GAUtqNb.png"), -- rt
        render.createMaterial("https://i.imgur.com/j3BoTEd.png"), -- ft
        render.createMaterial("https://i.imgur.com/MjVcmEB.png"), -- up
        render.createMaterial("https://i.imgur.com/9ggWgbr.png"), -- bt
    }
    skyAngles = {
        Angle(0,0,-90),
        Angle(0,90,-90),
        Angle(0,180,-90),
        Angle(0,-90,-90),
        Angle(0,-90,0),
        Angle(180,90,0),
    }
    for i = 1, 6 do
        m = Matrix()
        m:scale(Vector(1,1,1)*100)
        m:rotate(skyAngles[i])
        m:translate(Vector(-0.5,-0.5 ,0.5))
        skyMatrix[i] = m
    end   
    
    planetMatrix = Matrix()
    planetMatrix:scale(Vector(1,1,1)*100)
    planetMatrix:rotate(Angle())
    planetMatrix:translate(Vector(1.2,0,0))
    
    
    local smallWheelDist = 20
    local solarSpread = 25
    local template = {
        -- core
        {
            name = "core",
            pos = Vector(0, 0, 0),
            ang = Angle(60, 100, 0),
            mdl = "models/sprops/cylinders/size_2/cylinder_3x60.mdl",
            mat = "sprops/trans/misc/ls_m1"
        },
        --center
        {
            name = "centerBulkTop",
            pos = Vector(0, 0, 2),
            ang = Angle(0, 0, 0),
            mdl = "models/sprops/misc/pyramids/rsize_2/rpyr_24x6.mdl",
            scale = Vector(1,1,1) * 1,
            parent = "core",
            mat = "sprops/trans/misc/ls_m1"
        },
        {
            name = "centerBulkTop",
            pos = Vector(0, 0, -2),
            ang = Angle(0, 0, 180),
            mdl = "models/sprops/misc/pyramids/rsize_2/rpyr_24x6.mdl",
            scale = Vector(1,1,1) * 1,
            parent = "core",
            mat = "sprops/trans/misc/ls_m1"
        },    
        {
            name = "centerBulkTop",
            pos = Vector(0, 0, 2),
            ang = Angle(0, 0, 0),
            mdl = "models/sprops/misc/pyramids/rsize_2/rpyr_24x6.mdl",
            scale = Vector(1,1,1) * 1,
            parent = "core",
            mat = "sprops/trans/misc/ls_m1"
        },
        {
            name = "centerRing",
            pos = Vector(0, 0, 0),
            ang = Angle(0, 0, 90),
            mdl = "models/sprops/misc/tubes/size_3/tube_36x6.mdl",
            parent = "core",
            mat = "sprops/trans/misc/ls_m1"
        },
        -- top
        {
            name = "topRing",
            pos = Vector(0, 0, smallWheelDist),
            ang = Angle(0, 0, 90),
            mdl = "models/sprops/misc/tubes/size_2/tube_24x6.mdl",
            parent = "core",
            mat = "sprops/trans/misc/ls_m1"
        },
        {
            name = "btmSolarA",
            pos = Vector(0, 0, solarSpread),
            ang = Angle(90, 50, 0),
            mdl = "models/sprops/rectangles_superthin/size_2/rect_12x18.mdl",
            scale = Vector(1,1,1) * 1,
            parent = "topRing",
            color    =    Color(45, 76, 255, 255),
            mat    =    "models/props/de_inferno/tileroof01",
        },    
        {
            name = "btmSolarB",
            pos = Vector(0, 0, -solarSpread),
            ang = Angle(90, 50, 0),
            mdl = "models/sprops/rectangles_superthin/size_2/rect_12x18.mdl",
            scale = Vector(1,1,1) * 1,
            parent = "topRing",
            color    =    Color(45, 76, 255, 255),
            mat    =    "models/props/de_inferno/tileroof01",
        },
        
        --bottom
        {
            name = "btmRing",
            pos = Vector(0, 0, -smallWheelDist),
            ang = Angle(0, 0, 90),
            mdl = "models/sprops/misc/tubes/size_2/tube_24x6.mdl",
            parent = "core",
            mat = "sprops/trans/misc/ls_m1"
        },
        
        {
            name = "btmSolarA",
            pos = Vector(0, 0, solarSpread),
            ang = Angle(90, 50, 0),
            mdl = "models/sprops/rectangles_superthin/size_2/rect_12x18.mdl",
            scale = Vector(1,1,1) * 1,
            parent = "btmRing",
            color    =    Color(45, 76, 255, 255),
            mat    =    "models/props/de_inferno/tileroof01",
        },    
        {
            name = "btmSolarB",
            pos = Vector(0, 0, -solarSpread),
            ang = Angle(90, 50, 0),
            mdl = "models/sprops/rectangles_superthin/size_2/rect_12x18.mdl",
            scale = Vector(1,1,1) * 1,
            parent = "btmRing",
            color    =    Color(45, 76, 255, 255),
            mat    =    "models/props/de_inferno/tileroof01",
        },
    }

    center = chip:getPos() + Vector(0,0,100)
    scale = 0.5
    stationHolos = {}
    for _, value in ipairs(template) do
        local pos = center + (value.pos or Vector()) * scale
        local ang = value.ang
        local parent = nil
        if value.parent then
            if type(value.parent) == "string" then
                parent = stationHolos[value.parent]
            else
                parent = value.parent
            end
            pos = parent:localToWorld(value.pos * scale)
            ang = parent:localToWorldAngles(value.ang)
        end
        local holo = hologram.create(
            pos, 
            ang, 
            value.mdl, 
            (value.scale or Vector(1,1,1)) * scale
        )
        
        if parent then
            holo:setParent(parent)
        end
        holo:setMaterial(value.mat or "")
        holo:setColor(value.color or Color(255,255,255))
        if value.size then
            holo:setSize(value.size * scale)
        end
        holo:setNoDraw()
        stationHolos[value.name] = holo
    end

    
    
    
    
    holos = {}  
    testScale = 50
    
    holos[1] = hologram.create(Vector(-200,2000,0), Angle(0,0,180), "models/effects/splode.mdl", Vector(1,1,1) )
    holos[1]:setNoDraw(true)
    
    holos[2] = hologram.create(Vector(-100,2000,0), Angle(0,0,180), "models/effects/splodearc.mdl", Vector(1,1,1) )
    holos[2]:setNoDraw(true)       
      
    holos[2] = hologram.create(Vector(-200,1500,0), Angle(0,0,180), "models/effects/splodeglass.mdl", Vector(1,1,1) )
    holos[2]:setNoDraw(true)       
  
    
    holos[3] = hologram.create(Vector(-150, 2000,0), Angle(20,0,10), "models/holograms/hq_torus_thin.mdl", Vector(1,1,0.1) * 70 )
    holos[3]:setColor(Color(255,200,200))
    holos[3]:setNoDraw(true)
    
    
    planetTexture = render.createMaterial("https://i.imgur.com/zc9BJoP.png")
    
    cornerTemplate = {
        {
            pos = Vector(1, 1, 1),
            ang = Angle(0,90,0),
        },
        {
            pos = Vector(-1, 1, 1),
            ang = Angle(0,180,0),
        },
        {
            pos = Vector(1,-1,1),
            ang = Angle(),
        },
        {
            pos = Vector(-1,-1,1),
            ang = Angle(0,-90,0),
        },
        {
            pos = Vector(1,1,-1),
            ang = Angle(0,90,0),
        },
        {
            pos = Vector(-1,1,-1),
            ang = Angle(0,180,0),
        },
        {
            pos = Vector(1,-1,-1),
            ang = Angle(),
        },
        {
            pos = Vector(-1,-1,-1),
            ang = Angle(0,-90,0),
        },
    }
    cornerHolos = {}
    local cornerSize
    for i = 1, 8 do
        cornerHolos[i] = hologram.create(cornerTemplate[i].pos * 0.5, cornerTemplate[i].ang, "models/mechanics/solid_steel/type_c_3_24.mdl")
        cornerHolos[i]:setNoDraw(true)
        cornerSize = cornerHolos[i]:obbSize()[1] * 0.5
    end
    hasDrawnCorners = false
    
    lastDraw = 0
    rot = 0
    planetRot = 0
    function renderScene()
        rot = (rot + 0.001) % 360
        --render.enableDepth(true)

        render.pushViewMatrix({
            type = "3D",
            origin = Vector(),
            --angles = player():getEyeAngles():rotateAroundAxis(Vector(0,0,1), rot),
            --znear = 1,
            zfar = 100000
        })



        for index, m in pairs(skyMatrix) do
            render.pushMatrix(m, true)
            render.setMaterial(skyMats[index])
            render.drawTexturedRectUV(0, 0, 1, 1, 0.001, 0.001, 0.999, 0.999)
            render.popMatrix()
        end

        
        render.pushMatrix(planetMatrix, true) 
        planetMatrix:rotate(Angle(0,0.001,0))
        render.setMaterial(planetTexture)
        render.draw3DSphere(Vector(),1, 50, 50)
        
        stationAng = planetMatrix:getAngles()[2] + 90
        stationRad = -math.rad(stationAng)

        stationHolos["core"]:setPos(Vector(math.sin(stationRad) * 5100, math.cos(stationRad) * 5100, math.cos(stationRad) * 500) + Vector(6000, 0, 0))
        if stationAng > 46.1 and stationAng < 135 then
            for index, holo in pairs(stationHolos) do
                holo:draw()
            end
        end

        render.popMatrix()
        
        
        for index, holo in pairs(holos) do
            holo:draw()
        end
        
        render.popViewMatrix()
        
        if not hasDrawnCorners and render.getScreenEntity():isValid() then
            hasDrawnCorners = true
            local size = render.getScreenEntity():obbSize()[1]
            for key, holo in pairs(cornerHolos) do
                holo:setPos(cornerTemplate[key].pos * size * 0.5 - Vector(cornerSize, cornerSize, 0) *cornerTemplate[key].pos * 1.2  + floorPos + Vector(0,0,size * 0.5) )
                holo:setMaterial("models/props_combine/metal_combinebridge001")
            end
            
        end
        for key, holo in pairs(cornerHolos) do
            holo:draw()
        end
        
        
    
    end
    
   hook.add("render","", renderScene)
end