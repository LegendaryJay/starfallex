--@name holo sphere
--@author Lil'Tugboat
--@server

local radial = 300
local binDegreeSize =  30  -- Degree size for bins
local parent = chip()
local usedBins = {}  -- Table to track used bins

function getBinName(angle)

    local pitch = angle[1] % 180
    pitch = math.floor(pitch / binDegreeSize)
    
    local yaw = angle[2] % 360
    yaw = math.floor(yaw / binDegreeSize)
    
    return pitch, yaw
end

local tableLength = 0
local function placeHolograms()
    local delayTime = 0.1  -- Delay time between placing each hologram

    local holoProxy = holograms.create(
        parent:obbCenterW(),
        parent:getAngles(),
        "models/sprops/misc/axis_plane.mdl",
        Vector(1, 1, 1)
    )
    holoProxy:setParent(parent)
    
    for pitch =0, 360, 1 do
        for yaw = 0, 360, 1 do
            local angle = Angle(pitch, yaw, 0)
            local outP, outY = getBinName(angle)
            local binName = outP .. "," .. outY
            if not usedBins[binName] then
                tableLength = tableLength + 1
                usedBins[binName] = true
                
                local angle = Angle(outP * binDegreeSize + binDegreeSize * 0.5 + 90, outY * binDegreeSize+ binDegreeSize * 0.5, 0)
                localVector = angle:getForward()
                
                local holo = holograms.create(
                    parent:getPos() + localVector * (100 + tableLength * 1 ), 
                    angle,
                    "models/holograms/cube.mdl",
                    Vector(0.01, 1, 1)
                )
                holo:setParent(holoProxy)

                coroutine.yield(delayTime)  -- Delay for visual effect and to reduce load
            end
        end
    end
    printTable(usedBins)
end

local co = coroutine.create(placeHolograms)
coroutine.resume(co)
hook.add("think", "manageHoloPlacementHook", function ()
    if coroutine.status(co) ~= "dead" then
        coroutine.resume(co)
    end
end)