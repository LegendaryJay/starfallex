--@name Circle Selector
--@author Lil'Tugboat
--@client

local CircleSelector = class("CircleSelector")

function CircleSelector:initialize(options, visualizer, callback, settings)
    self.options = options
    self.visualizer = visualizer -- index, holo, option
    self.callback = callback -- key, value

    --default settings: 
    local defaultSettings = {
        applyHoverEffect = function(holo, scale) holo:setScale(Vector(1, 1, 1.5) * scale) end,
        removeHoverEffect = function(holo, scale) holo:setScale(Vector(1, 1, 1) * scale) end,
        radialDistance = 40,
        deadZone = 40 * 0.7,
        selectionDistance = 100,
        model = "models/holograms/hq_rcube.mdl",
    }
    for key, value in pairs(defaultSettings) do
        self[key] = (settings and settings[key] and type(settings[key]) == type(value)) and settings[key] or value
    end

    self.initialAngle = Angle()
    self.selectionHolograms = {}
    self.currentIndex = 0
    self.sizeRadius = 0
    self.selectionAngleSpan = 0
    self.scaleFactor = 1

    self:initializeSelections()
    return self
end

function CircleSelector:initializeSelections()
    self.initialAngle = player():getEyeAngles()
    self.selectionAngleSpan = 360 / #self.options
    for index, option in ipairs(self.options) do
        local anglePercentage = (index - 1) / #self.options

        local xyAngle = math.rad(90 + anglePercentage * 360)
        local holo = hologram.create(
            Vector(
                self.selectionDistance,
                math.cos(xyAngle) * self.radialDistance,
                math.sin(xyAngle) * self.radialDistance
            ),
            Angle(0,0,360 * anglePercentage),
            self.model
        )
        if index == 1 then
            local size = holo:obbSize()
            local diagonalSize = math.sqrt(size[2]^2 + size[3]^2)
            local maxScale = 2 * self.radialDistance * 3.1415 / #self.options
            self.scaleFactor = math.min(maxScale / diagonalSize, 1)
        end
        holo:setScale(Vector(1, 1, 1) * self.scaleFactor)
        self.visualizer(index, holo, self.options[index])
        holo:suppressEngineLighting(true)
        holo:setNoDraw(true)
        self.selectionHolograms[index] = holo
    end

    hook.add("drawHud", "circleSelector", function()
        self:render()
    end)
end

function CircleSelector:update()
    local viewAngle = player():getEyeAngles() - self.initialAngle
    local directionVector = Vector(
        math.normalizeAngle(viewAngle[2]),
        math.normalizeAngle(viewAngle[1]),
        0
    )
    local angleToSelection = 360 - (360 + 90 - self.selectionAngleSpan * 0.5 + math.deg(math.atan2(directionVector[2], directionVector[1]))) % 360
    
    local intersectionLength = self:getIntersection():setX(0):getLength()
    local previousHover = (self.currentIndex > 0) and self.selectionHolograms[self.currentIndex] or nil
    
    if intersectionLength > self.deadZone then
    
        local selectedIndex = math.floor(angleToSelection / self.selectionAngleSpan) + 1
        
        local hoverHologram = (selectedIndex > 0) and self.selectionHolograms[selectedIndex] or nil
        
        if (not previousHover and hoverHologram) or previousHover ~= hoverHologram then
            if previousHover and previousHover:isValid() then
                self.removeHoverEffect(previousHover, self.scaleFactor)
            end
            if hoverHologram and hoverHologram:isValid() then
                self.applyHoverEffect(hoverHologram, self.scaleFactor)
            end
            self.currentIndex = selectedIndex
        end
    else
        if previousHover and previousHover:isValid() then
            self.removeHoverEffect(previousHover, self.scaleFactor )
        end
        self.currentIndex = 0
    end
end

function CircleSelector:render()
    render.pushViewMatrix({
        type = "3D",
        origin = Vector(),
        angles = self.initialAngle and (player():getEyeAngles() - self.initialAngle) or Angle()
    })
    for _, holo in ipairs(self.selectionHolograms) do
        holo:draw()
    end
    render.popViewMatrix()
end

function CircleSelector:remove()
    for _, holo in ipairs(self.selectionHolograms) do
        if holo and holo:isValid() then
            holo:remove()
        end
    end
    hook.remove("drawHud", "circleSelector")
end

function CircleSelector:close()
    local index = (self.currentIndex > 0) and self.currentIndex or nil
    local value = index and self.options[index] or nil
    self.callback(index, value)
    self:remove()
    self = nil
end

function CircleSelector:getIntersection()
    local eyeAngles = player():getEyeAngles() - self.initialAngle
    local direction = eyeAngles:getForward()
    
    local planePoint = Vector(self.selectionDistance, 0, 0)
    local planeNormal = Vector(1, 0, 0) 

    local origin = Vector()

    local d = planeNormal:dot(planePoint)
    local t = (d - planeNormal:dot(origin)) / planeNormal:dot(direction)

    local intersection = origin + direction * t

    return intersection
end
--[[

-- Example usage
if player() == player() then
    enableHud(nil, true)
    local itemCount = 2
    local selectionAngleSpan = 360 / itemCount
    local colorOptions = {}

    for i = 1, itemCount do
        colorOptions[i] = Color(360 * (i - 1) / itemCount, 1, 1):hsvToRGB()
    end

    local circleSelector

    local function visualizer(index, holo, option)
        holo:setColor(option)
    end

    local mode = -1

    hook.add("keyRelease", "releaseHandler", function(ply, key)
        if ply == player() and key == IN_KEY.ATTACK2 and mode > 0 then
            mode = 0
        end
    end)

    hook.add("KeyPress", "pressHandler", function(ply, key)
        if ply == player() and key == IN_KEY.ATTACK2 and mode < 1 and not input.getCursorVisible() then
            mode = 1
        end
    end)

    hook.add("think", "updateHandler", function()
        if mode == 1 then
            circleSelector = CircleSelector:new(colorOptions, visualizer, function(index, value)
                print(tostring(value))
            end)
        elseif mode > 1 then
            circleSelector:update()
        elseif mode == 0 then
            circleSelector:close()
        end

        if mode > 0 then
            mode = mode + 1
        elseif mode == 0 then
            mode = -1
        end
    end)
end
]]
return CircleSelector